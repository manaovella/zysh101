-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nco is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    phasein_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    phasein_V_TVALID : IN STD_LOGIC;
    phasein_V_TREADY : OUT STD_LOGIC;
    dataout_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dataout_V_TVALID : OUT STD_LOGIC;
    dataout_V_TREADY : IN STD_LOGIC;
    params_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_V_EN_A : OUT STD_LOGIC;
    params_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    params_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    params_V_Clk_A : OUT STD_LOGIC;
    params_V_Rst_A : OUT STD_LOGIC );
end;


architecture behav of nco is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nco,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg225-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.254000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=147,HLS_SYN_LUT=103}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal phasein_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal phasein_V_0_vld_in : STD_LOGIC;
    signal phasein_V_0_vld_out : STD_LOGIC;
    signal phasein_V_0_ack_in : STD_LOGIC;
    signal phasein_V_0_ack_out : STD_LOGIC;
    signal phasein_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal phasein_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal phasein_V_0_sel_rd : STD_LOGIC := '0';
    signal phasein_V_0_sel_wr : STD_LOGIC := '0';
    signal phasein_V_0_sel : STD_LOGIC;
    signal phasein_V_0_load_A : STD_LOGIC;
    signal phasein_V_0_load_B : STD_LOGIC;
    signal phasein_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal phasein_V_0_state_cmp_full : STD_LOGIC;
    signal dataout_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal dataout_V_1_vld_in : STD_LOGIC;
    signal dataout_V_1_vld_out : STD_LOGIC;
    signal dataout_V_1_ack_in : STD_LOGIC;
    signal dataout_V_1_ack_out : STD_LOGIC;
    signal dataout_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal dataout_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal dataout_V_1_sel_rd : STD_LOGIC := '0';
    signal dataout_V_1_sel_wr : STD_LOGIC := '0';
    signal dataout_V_1_sel : STD_LOGIC;
    signal dataout_V_1_load_A : STD_LOGIC;
    signal dataout_V_1_load_B : STD_LOGIC;
    signal dataout_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dataout_V_1_state_cmp_full : STD_LOGIC;
    signal sinarray_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sinarray_V_ce0 : STD_LOGIC;
    signal sinarray_V_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal phasein_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal dataout_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_reg_125 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_121_fu_110_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_fu_91_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_fu_81_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_data_V_cast_fu_106_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component nco_sinarray_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    sinarray_V_U : component nco_sinarray_V
    generic map (
        DataWidth => 22,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sinarray_V_address0,
        ce0 => sinarray_V_ce0,
        q0 => sinarray_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    dataout_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dataout_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dataout_V_1_ack_out) and (ap_const_logic_1 = dataout_V_1_vld_out))) then 
                                        dataout_V_1_sel_rd <= not(dataout_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dataout_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dataout_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dataout_V_1_vld_in) and (ap_const_logic_1 = dataout_V_1_ack_in))) then 
                                        dataout_V_1_sel_wr <= not(dataout_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dataout_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dataout_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = dataout_V_1_vld_in) and (ap_const_logic_1 = dataout_V_1_ack_out) and (ap_const_lv2_3 = dataout_V_1_state)) or ((ap_const_logic_0 = dataout_V_1_vld_in) and (ap_const_lv2_2 = dataout_V_1_state)))) then 
                    dataout_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = dataout_V_1_vld_in) and (ap_const_logic_0 = dataout_V_1_ack_out) and (ap_const_lv2_3 = dataout_V_1_state)) or ((ap_const_logic_0 = dataout_V_1_ack_out) and (ap_const_lv2_1 = dataout_V_1_state)))) then 
                    dataout_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = dataout_V_1_vld_in) and (ap_const_lv2_2 = dataout_V_1_state)) or ((ap_const_logic_1 = dataout_V_1_ack_out) and (ap_const_lv2_1 = dataout_V_1_state)) or ((ap_const_lv2_3 = dataout_V_1_state) and not(((ap_const_logic_1 = dataout_V_1_vld_in) and (ap_const_logic_0 = dataout_V_1_ack_out))) and not(((ap_const_logic_0 = dataout_V_1_vld_in) and (ap_const_logic_1 = dataout_V_1_ack_out)))))) then 
                    dataout_V_1_state <= ap_const_lv2_3;
                else 
                    dataout_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    phasein_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                phasein_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = phasein_V_0_ack_out) and (ap_const_logic_1 = phasein_V_0_vld_out))) then 
                                        phasein_V_0_sel_rd <= not(phasein_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    phasein_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                phasein_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = phasein_V_0_vld_in) and (ap_const_logic_1 = phasein_V_0_ack_in))) then 
                                        phasein_V_0_sel_wr <= not(phasein_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    phasein_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                phasein_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = phasein_V_0_vld_in) and (ap_const_logic_1 = phasein_V_0_ack_out) and (phasein_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = phasein_V_0_vld_in) and (phasein_V_0_state = ap_const_lv2_2)))) then 
                    phasein_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = phasein_V_0_vld_in) and (ap_const_logic_0 = phasein_V_0_ack_out) and (phasein_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = phasein_V_0_ack_out) and (phasein_V_0_state = ap_const_lv2_1)))) then 
                    phasein_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = phasein_V_0_vld_in) and (phasein_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = phasein_V_0_ack_out) and (phasein_V_0_state = ap_const_lv2_1)) or ((phasein_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = phasein_V_0_vld_in) and (ap_const_logic_0 = phasein_V_0_ack_out))) and not(((ap_const_logic_0 = phasein_V_0_vld_in) and (ap_const_logic_1 = phasein_V_0_ack_out)))))) then 
                    phasein_V_0_state <= ap_const_lv2_3;
                else 
                    phasein_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dataout_V_1_load_A)) then
                dataout_V_1_payload_A <= tmp_121_fu_110_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dataout_V_1_load_B)) then
                dataout_V_1_payload_B <= tmp_121_fu_110_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = phasein_V_0_load_A)) then
                phasein_V_0_payload_A <= phasein_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = phasein_V_0_load_B)) then
                phasein_V_0_payload_B <= phasein_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (phasein_V_0_vld_out = ap_const_logic_1))) then
                tmp_2_reg_125 <= phasein_V_0_data_out(30 downto 24);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (phasein_V_0_vld_out, dataout_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (phasein_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (dataout_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (dataout_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    dataout_V_1_ack_in <= dataout_V_1_state(1);
    dataout_V_1_ack_out <= dataout_V_TREADY;

    dataout_V_1_data_out_assign_proc : process(dataout_V_1_payload_A, dataout_V_1_payload_B, dataout_V_1_sel)
    begin
        if ((ap_const_logic_1 = dataout_V_1_sel)) then 
            dataout_V_1_data_out <= dataout_V_1_payload_B;
        else 
            dataout_V_1_data_out <= dataout_V_1_payload_A;
        end if; 
    end process;

    dataout_V_1_load_A <= (dataout_V_1_state_cmp_full and not(dataout_V_1_sel_wr));
    dataout_V_1_load_B <= (dataout_V_1_sel_wr and dataout_V_1_state_cmp_full);
    dataout_V_1_sel <= dataout_V_1_sel_rd;
    dataout_V_1_state_cmp_full <= '0' when (dataout_V_1_state = ap_const_lv2_1) else '1';

    dataout_V_1_vld_in_assign_proc : process(dataout_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (dataout_V_1_ack_in = ap_const_logic_1))) then 
            dataout_V_1_vld_in <= ap_const_logic_1;
        else 
            dataout_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dataout_V_1_vld_out <= dataout_V_1_state(0);
    dataout_V_TDATA <= dataout_V_1_data_out;

    dataout_V_TDATA_blk_n_assign_proc : process(dataout_V_1_state, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            dataout_V_TDATA_blk_n <= dataout_V_1_state(1);
        else 
            dataout_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dataout_V_TVALID <= dataout_V_1_state(0);
    params_V_Addr_A <= ap_const_lv32_0;
    params_V_Clk_A <= ap_clk;
    params_V_Din_A <= ap_const_lv32_0;
    params_V_EN_A <= ap_const_logic_0;

    params_V_Rst_A_assign_proc : process(ap_rst_n)
    begin
                params_V_Rst_A <= not(ap_rst_n);
    end process;

    params_V_WEN_A <= ap_const_lv4_0;
    phasein_V_0_ack_in <= phasein_V_0_state(1);

    phasein_V_0_ack_out_assign_proc : process(phasein_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (phasein_V_0_vld_out = ap_const_logic_1))) then 
            phasein_V_0_ack_out <= ap_const_logic_1;
        else 
            phasein_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    phasein_V_0_data_out_assign_proc : process(phasein_V_0_payload_A, phasein_V_0_payload_B, phasein_V_0_sel)
    begin
        if ((ap_const_logic_1 = phasein_V_0_sel)) then 
            phasein_V_0_data_out <= phasein_V_0_payload_B;
        else 
            phasein_V_0_data_out <= phasein_V_0_payload_A;
        end if; 
    end process;

    phasein_V_0_load_A <= (phasein_V_0_state_cmp_full and not(phasein_V_0_sel_wr));
    phasein_V_0_load_B <= (phasein_V_0_sel_wr and phasein_V_0_state_cmp_full);
    phasein_V_0_sel <= phasein_V_0_sel_rd;
    phasein_V_0_state_cmp_full <= '0' when (phasein_V_0_state = ap_const_lv2_1) else '1';
    phasein_V_0_vld_in <= phasein_V_TVALID;
    phasein_V_0_vld_out <= phasein_V_0_state(0);

    phasein_V_TDATA_blk_n_assign_proc : process(phasein_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            phasein_V_TDATA_blk_n <= phasein_V_0_state(0);
        else 
            phasein_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    phasein_V_TREADY <= phasein_V_0_state(1);
    sinarray_V_address0 <= tmp_1_cast_fu_91_p1(10 - 1 downto 0);

    sinarray_V_ce0_assign_proc : process(phasein_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (phasein_V_0_vld_out = ap_const_logic_1))) then 
            sinarray_V_ce0 <= ap_const_logic_1;
        else 
            sinarray_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_121_fu_110_p4 <= ((ap_const_lv1_0 & tmp_2_reg_125) & tmp_data_V_cast_fu_106_p1);
    tmp_1_cast_fu_91_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast_fu_81_p4),32));
    tmp_cast_fu_81_p4 <= phasein_V_0_data_out(21 downto 12);
    tmp_data_V_cast_fu_106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sinarray_V_q0),24));
end behav;
