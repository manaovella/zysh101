// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "nco.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic nco::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic nco::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> nco::ap_ST_fsm_state1 = "1";
const sc_lv<4> nco::ap_ST_fsm_state2 = "10";
const sc_lv<4> nco::ap_ST_fsm_state3 = "100";
const sc_lv<4> nco::ap_ST_fsm_state4 = "1000";
const sc_lv<1> nco::ap_const_lv1_0 = "0";
const sc_lv<1> nco::ap_const_lv1_1 = "1";
const sc_lv<2> nco::ap_const_lv2_0 = "00";
const sc_lv<2> nco::ap_const_lv2_2 = "10";
const sc_lv<2> nco::ap_const_lv2_3 = "11";
const sc_lv<2> nco::ap_const_lv2_1 = "1";
const sc_lv<32> nco::ap_const_lv32_1 = "1";
const sc_lv<32> nco::ap_const_lv32_2 = "10";
const sc_lv<32> nco::ap_const_lv32_3 = "11";
const sc_lv<32> nco::ap_const_lv32_C = "1100";
const sc_lv<32> nco::ap_const_lv32_15 = "10101";
const sc_lv<32> nco::ap_const_lv32_18 = "11000";
const sc_lv<32> nco::ap_const_lv32_1E = "11110";
const sc_lv<32> nco::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> nco::ap_const_lv4_0 = "0000";
const bool nco::ap_const_boolean_1 = true;

nco::nco(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sinarray_V_U = new nco_sinarray_V("sinarray_V_U");
    sinarray_V_U->clk(ap_clk);
    sinarray_V_U->reset(ap_rst_n_inv);
    sinarray_V_U->address0(sinarray_V_address0);
    sinarray_V_U->ce0(sinarray_V_ce0);
    sinarray_V_U->q0(sinarray_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_dataout_V_1_ack_in);
    sensitive << ( dataout_V_1_state );

    SC_METHOD(thread_dataout_V_1_ack_out);
    sensitive << ( dataout_V_TREADY );

    SC_METHOD(thread_dataout_V_1_data_out);
    sensitive << ( dataout_V_1_payload_A );
    sensitive << ( dataout_V_1_payload_B );
    sensitive << ( dataout_V_1_sel );

    SC_METHOD(thread_dataout_V_1_load_A);
    sensitive << ( dataout_V_1_sel_wr );
    sensitive << ( dataout_V_1_state_cmp_full );

    SC_METHOD(thread_dataout_V_1_load_B);
    sensitive << ( dataout_V_1_sel_wr );
    sensitive << ( dataout_V_1_state_cmp_full );

    SC_METHOD(thread_dataout_V_1_sel);
    sensitive << ( dataout_V_1_sel_rd );

    SC_METHOD(thread_dataout_V_1_state_cmp_full);
    sensitive << ( dataout_V_1_state );

    SC_METHOD(thread_dataout_V_1_vld_in);
    sensitive << ( dataout_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dataout_V_1_vld_out);
    sensitive << ( dataout_V_1_state );

    SC_METHOD(thread_dataout_V_TDATA);
    sensitive << ( dataout_V_1_data_out );

    SC_METHOD(thread_dataout_V_TDATA_blk_n);
    sensitive << ( dataout_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_dataout_V_TVALID);
    sensitive << ( dataout_V_1_state );

    SC_METHOD(thread_params_V_Addr_A);

    SC_METHOD(thread_params_V_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_params_V_Din_A);

    SC_METHOD(thread_params_V_EN_A);

    SC_METHOD(thread_params_V_Rst_A);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_params_V_WEN_A);

    SC_METHOD(thread_phasein_V_0_ack_in);
    sensitive << ( phasein_V_0_state );

    SC_METHOD(thread_phasein_V_0_ack_out);
    sensitive << ( phasein_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_phasein_V_0_data_out);
    sensitive << ( phasein_V_0_payload_A );
    sensitive << ( phasein_V_0_payload_B );
    sensitive << ( phasein_V_0_sel );

    SC_METHOD(thread_phasein_V_0_load_A);
    sensitive << ( phasein_V_0_sel_wr );
    sensitive << ( phasein_V_0_state_cmp_full );

    SC_METHOD(thread_phasein_V_0_load_B);
    sensitive << ( phasein_V_0_sel_wr );
    sensitive << ( phasein_V_0_state_cmp_full );

    SC_METHOD(thread_phasein_V_0_sel);
    sensitive << ( phasein_V_0_sel_rd );

    SC_METHOD(thread_phasein_V_0_state_cmp_full);
    sensitive << ( phasein_V_0_state );

    SC_METHOD(thread_phasein_V_0_vld_in);
    sensitive << ( phasein_V_TVALID );

    SC_METHOD(thread_phasein_V_0_vld_out);
    sensitive << ( phasein_V_0_state );

    SC_METHOD(thread_phasein_V_TDATA_blk_n);
    sensitive << ( phasein_V_0_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_phasein_V_TREADY);
    sensitive << ( phasein_V_0_state );

    SC_METHOD(thread_sinarray_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_cast_fu_91_p1 );

    SC_METHOD(thread_sinarray_V_ce0);
    sensitive << ( phasein_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_121_fu_110_p4);
    sensitive << ( tmp_2_reg_125 );
    sensitive << ( tmp_data_V_cast_fu_106_p1 );

    SC_METHOD(thread_tmp_1_cast_fu_91_p1);
    sensitive << ( tmp_cast_fu_81_p4 );

    SC_METHOD(thread_tmp_cast_fu_81_p4);
    sensitive << ( phasein_V_0_data_out );

    SC_METHOD(thread_tmp_data_V_cast_fu_106_p1);
    sensitive << ( sinarray_V_q0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( phasein_V_0_vld_out );
    sensitive << ( dataout_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    phasein_V_0_sel_rd = SC_LOGIC_0;
    phasein_V_0_sel_wr = SC_LOGIC_0;
    phasein_V_0_state = "00";
    dataout_V_1_sel_rd = SC_LOGIC_0;
    dataout_V_1_sel_wr = SC_LOGIC_0;
    dataout_V_1_state = "00";
    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "nco_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, phasein_V_TDATA, "(port)phasein_V_TDATA");
    sc_trace(mVcdFile, phasein_V_TVALID, "(port)phasein_V_TVALID");
    sc_trace(mVcdFile, phasein_V_TREADY, "(port)phasein_V_TREADY");
    sc_trace(mVcdFile, dataout_V_TDATA, "(port)dataout_V_TDATA");
    sc_trace(mVcdFile, dataout_V_TVALID, "(port)dataout_V_TVALID");
    sc_trace(mVcdFile, dataout_V_TREADY, "(port)dataout_V_TREADY");
    sc_trace(mVcdFile, params_V_Addr_A, "(port)params_V_Addr_A");
    sc_trace(mVcdFile, params_V_EN_A, "(port)params_V_EN_A");
    sc_trace(mVcdFile, params_V_WEN_A, "(port)params_V_WEN_A");
    sc_trace(mVcdFile, params_V_Din_A, "(port)params_V_Din_A");
    sc_trace(mVcdFile, params_V_Dout_A, "(port)params_V_Dout_A");
    sc_trace(mVcdFile, params_V_Clk_A, "(port)params_V_Clk_A");
    sc_trace(mVcdFile, params_V_Rst_A, "(port)params_V_Rst_A");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, phasein_V_0_data_out, "phasein_V_0_data_out");
    sc_trace(mVcdFile, phasein_V_0_vld_in, "phasein_V_0_vld_in");
    sc_trace(mVcdFile, phasein_V_0_vld_out, "phasein_V_0_vld_out");
    sc_trace(mVcdFile, phasein_V_0_ack_in, "phasein_V_0_ack_in");
    sc_trace(mVcdFile, phasein_V_0_ack_out, "phasein_V_0_ack_out");
    sc_trace(mVcdFile, phasein_V_0_payload_A, "phasein_V_0_payload_A");
    sc_trace(mVcdFile, phasein_V_0_payload_B, "phasein_V_0_payload_B");
    sc_trace(mVcdFile, phasein_V_0_sel_rd, "phasein_V_0_sel_rd");
    sc_trace(mVcdFile, phasein_V_0_sel_wr, "phasein_V_0_sel_wr");
    sc_trace(mVcdFile, phasein_V_0_sel, "phasein_V_0_sel");
    sc_trace(mVcdFile, phasein_V_0_load_A, "phasein_V_0_load_A");
    sc_trace(mVcdFile, phasein_V_0_load_B, "phasein_V_0_load_B");
    sc_trace(mVcdFile, phasein_V_0_state, "phasein_V_0_state");
    sc_trace(mVcdFile, phasein_V_0_state_cmp_full, "phasein_V_0_state_cmp_full");
    sc_trace(mVcdFile, dataout_V_1_data_out, "dataout_V_1_data_out");
    sc_trace(mVcdFile, dataout_V_1_vld_in, "dataout_V_1_vld_in");
    sc_trace(mVcdFile, dataout_V_1_vld_out, "dataout_V_1_vld_out");
    sc_trace(mVcdFile, dataout_V_1_ack_in, "dataout_V_1_ack_in");
    sc_trace(mVcdFile, dataout_V_1_ack_out, "dataout_V_1_ack_out");
    sc_trace(mVcdFile, dataout_V_1_payload_A, "dataout_V_1_payload_A");
    sc_trace(mVcdFile, dataout_V_1_payload_B, "dataout_V_1_payload_B");
    sc_trace(mVcdFile, dataout_V_1_sel_rd, "dataout_V_1_sel_rd");
    sc_trace(mVcdFile, dataout_V_1_sel_wr, "dataout_V_1_sel_wr");
    sc_trace(mVcdFile, dataout_V_1_sel, "dataout_V_1_sel");
    sc_trace(mVcdFile, dataout_V_1_load_A, "dataout_V_1_load_A");
    sc_trace(mVcdFile, dataout_V_1_load_B, "dataout_V_1_load_B");
    sc_trace(mVcdFile, dataout_V_1_state, "dataout_V_1_state");
    sc_trace(mVcdFile, dataout_V_1_state_cmp_full, "dataout_V_1_state_cmp_full");
    sc_trace(mVcdFile, sinarray_V_address0, "sinarray_V_address0");
    sc_trace(mVcdFile, sinarray_V_ce0, "sinarray_V_ce0");
    sc_trace(mVcdFile, sinarray_V_q0, "sinarray_V_q0");
    sc_trace(mVcdFile, phasein_V_TDATA_blk_n, "phasein_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, dataout_V_TDATA_blk_n, "dataout_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_2_reg_125, "tmp_2_reg_125");
    sc_trace(mVcdFile, tmp_121_fu_110_p4, "tmp_121_fu_110_p4");
    sc_trace(mVcdFile, tmp_1_cast_fu_91_p1, "tmp_1_cast_fu_91_p1");
    sc_trace(mVcdFile, tmp_cast_fu_81_p4, "tmp_cast_fu_81_p4");
    sc_trace(mVcdFile, tmp_data_V_cast_fu_106_p1, "tmp_data_V_cast_fu_106_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("nco.hdltvin.dat");
    mHdltvoutHandle.open("nco.hdltvout.dat");
}

nco::~nco() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sinarray_V_U;
}

void nco::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dataout_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dataout_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dataout_V_1_vld_out.read()))) {
            dataout_V_1_sel_rd =  (sc_logic) (~dataout_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dataout_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dataout_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dataout_V_1_ack_in.read()))) {
            dataout_V_1_sel_wr =  (sc_logic) (~dataout_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dataout_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dataout_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dataout_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dataout_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dataout_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dataout_V_1_state.read())))) {
            dataout_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dataout_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dataout_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dataout_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dataout_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dataout_V_1_state.read())))) {
            dataout_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dataout_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dataout_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dataout_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dataout_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dataout_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dataout_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dataout_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dataout_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dataout_V_1_ack_out.read()))))) {
            dataout_V_1_state = ap_const_lv2_3;
        } else {
            dataout_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phasein_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, phasein_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, phasein_V_0_vld_out.read()))) {
            phasein_V_0_sel_rd =  (sc_logic) (~phasein_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phasein_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, phasein_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, phasein_V_0_ack_in.read()))) {
            phasein_V_0_sel_wr =  (sc_logic) (~phasein_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        phasein_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, phasein_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, phasein_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(phasein_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, phasein_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(phasein_V_0_state.read(), ap_const_lv2_2)))) {
            phasein_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, phasein_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, phasein_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(phasein_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, phasein_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(phasein_V_0_state.read(), ap_const_lv2_1)))) {
            phasein_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, phasein_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(phasein_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, phasein_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(phasein_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(phasein_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, phasein_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, phasein_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, phasein_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, phasein_V_0_ack_out.read()))))) {
            phasein_V_0_state = ap_const_lv2_3;
        } else {
            phasein_V_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dataout_V_1_load_A.read())) {
        dataout_V_1_payload_A = tmp_121_fu_110_p4.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dataout_V_1_load_B.read())) {
        dataout_V_1_payload_B = tmp_121_fu_110_p4.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, phasein_V_0_load_A.read())) {
        phasein_V_0_payload_A = phasein_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, phasein_V_0_load_B.read())) {
        phasein_V_0_payload_B = phasein_V_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(phasein_V_0_vld_out.read(), ap_const_logic_1))) {
        tmp_2_reg_125 = phasein_V_0_data_out.read().range(30, 24);
    }
}

void nco::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void nco::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void nco::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void nco::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void nco::thread_dataout_V_1_ack_in() {
    dataout_V_1_ack_in = dataout_V_1_state.read()[1];
}

void nco::thread_dataout_V_1_ack_out() {
    dataout_V_1_ack_out = dataout_V_TREADY.read();
}

void nco::thread_dataout_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dataout_V_1_sel.read())) {
        dataout_V_1_data_out = dataout_V_1_payload_B.read();
    } else {
        dataout_V_1_data_out = dataout_V_1_payload_A.read();
    }
}

void nco::thread_dataout_V_1_load_A() {
    dataout_V_1_load_A = (dataout_V_1_state_cmp_full.read() & ~dataout_V_1_sel_wr.read());
}

void nco::thread_dataout_V_1_load_B() {
    dataout_V_1_load_B = (dataout_V_1_sel_wr.read() & dataout_V_1_state_cmp_full.read());
}

void nco::thread_dataout_V_1_sel() {
    dataout_V_1_sel = dataout_V_1_sel_rd.read();
}

void nco::thread_dataout_V_1_state_cmp_full() {
    dataout_V_1_state_cmp_full =  (sc_logic) ((!dataout_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dataout_V_1_state.read() != ap_const_lv2_1))[0];
}

void nco::thread_dataout_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(dataout_V_1_ack_in.read(), ap_const_logic_1))) {
        dataout_V_1_vld_in = ap_const_logic_1;
    } else {
        dataout_V_1_vld_in = ap_const_logic_0;
    }
}

void nco::thread_dataout_V_1_vld_out() {
    dataout_V_1_vld_out = dataout_V_1_state.read()[0];
}

void nco::thread_dataout_V_TDATA() {
    dataout_V_TDATA = dataout_V_1_data_out.read();
}

void nco::thread_dataout_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        dataout_V_TDATA_blk_n = dataout_V_1_state.read()[1];
    } else {
        dataout_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void nco::thread_dataout_V_TVALID() {
    dataout_V_TVALID = dataout_V_1_state.read()[0];
}

void nco::thread_params_V_Addr_A() {
    params_V_Addr_A = ap_const_lv32_0;
}

void nco::thread_params_V_Clk_A() {
    params_V_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void nco::thread_params_V_Din_A() {
    params_V_Din_A = ap_const_lv32_0;
}

void nco::thread_params_V_EN_A() {
    params_V_EN_A = ap_const_logic_0;
}

void nco::thread_params_V_Rst_A() {
    params_V_Rst_A =  (sc_logic) (~ap_rst_n.read());
}

void nco::thread_params_V_WEN_A() {
    params_V_WEN_A = ap_const_lv4_0;
}

void nco::thread_phasein_V_0_ack_in() {
    phasein_V_0_ack_in = phasein_V_0_state.read()[1];
}

void nco::thread_phasein_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(phasein_V_0_vld_out.read(), ap_const_logic_1))) {
        phasein_V_0_ack_out = ap_const_logic_1;
    } else {
        phasein_V_0_ack_out = ap_const_logic_0;
    }
}

void nco::thread_phasein_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, phasein_V_0_sel.read())) {
        phasein_V_0_data_out = phasein_V_0_payload_B.read();
    } else {
        phasein_V_0_data_out = phasein_V_0_payload_A.read();
    }
}

void nco::thread_phasein_V_0_load_A() {
    phasein_V_0_load_A = (phasein_V_0_state_cmp_full.read() & ~phasein_V_0_sel_wr.read());
}

void nco::thread_phasein_V_0_load_B() {
    phasein_V_0_load_B = (phasein_V_0_sel_wr.read() & phasein_V_0_state_cmp_full.read());
}

void nco::thread_phasein_V_0_sel() {
    phasein_V_0_sel = phasein_V_0_sel_rd.read();
}

void nco::thread_phasein_V_0_state_cmp_full() {
    phasein_V_0_state_cmp_full =  (sc_logic) ((!phasein_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(phasein_V_0_state.read() != ap_const_lv2_1))[0];
}

void nco::thread_phasein_V_0_vld_in() {
    phasein_V_0_vld_in = phasein_V_TVALID.read();
}

void nco::thread_phasein_V_0_vld_out() {
    phasein_V_0_vld_out = phasein_V_0_state.read()[0];
}

void nco::thread_phasein_V_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        phasein_V_TDATA_blk_n = phasein_V_0_state.read()[0];
    } else {
        phasein_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void nco::thread_phasein_V_TREADY() {
    phasein_V_TREADY = phasein_V_0_state.read()[1];
}

void nco::thread_sinarray_V_address0() {
    sinarray_V_address0 =  (sc_lv<10>) (tmp_1_cast_fu_91_p1.read());
}

void nco::thread_sinarray_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(phasein_V_0_vld_out.read(), ap_const_logic_1))) {
        sinarray_V_ce0 = ap_const_logic_1;
    } else {
        sinarray_V_ce0 = ap_const_logic_0;
    }
}

void nco::thread_tmp_121_fu_110_p4() {
    tmp_121_fu_110_p4 = esl_concat<8,24>(esl_concat<1,7>(ap_const_lv1_0, tmp_2_reg_125.read()), tmp_data_V_cast_fu_106_p1.read());
}

void nco::thread_tmp_1_cast_fu_91_p1() {
    tmp_1_cast_fu_91_p1 = esl_zext<32,10>(tmp_cast_fu_81_p4.read());
}

void nco::thread_tmp_cast_fu_81_p4() {
    tmp_cast_fu_81_p4 = phasein_V_0_data_out.read().range(21, 12);
}

void nco::thread_tmp_data_V_cast_fu_106_p1() {
    tmp_data_V_cast_fu_106_p1 = esl_zext<24,22>(sinarray_V_q0.read());
}

void nco::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(phasein_V_0_vld_out.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(dataout_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(dataout_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void nco::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"phasein_V_TDATA\" :  \"" << phasein_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"phasein_V_TVALID\" :  \"" << phasein_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"phasein_V_TREADY\" :  \"" << phasein_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dataout_V_TDATA\" :  \"" << dataout_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dataout_V_TVALID\" :  \"" << dataout_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dataout_V_TREADY\" :  \"" << dataout_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_Addr_A\" :  \"" << params_V_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_EN_A\" :  \"" << params_V_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_WEN_A\" :  \"" << params_V_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_Din_A\" :  \"" << params_V_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"params_V_Dout_A\" :  \"" << params_V_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_Clk_A\" :  \"" << params_V_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_Rst_A\" :  \"" << params_V_Rst_A.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

