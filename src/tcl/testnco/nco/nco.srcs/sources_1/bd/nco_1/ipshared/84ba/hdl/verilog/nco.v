// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nco,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg225-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.254000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=147,HLS_SYN_LUT=103}" *)

module nco (
        ap_clk,
        ap_rst_n,
        phasein_V_TDATA,
        phasein_V_TVALID,
        phasein_V_TREADY,
        dataout_V_TDATA,
        dataout_V_TVALID,
        dataout_V_TREADY,
        params_V_Addr_A,
        params_V_EN_A,
        params_V_WEN_A,
        params_V_Din_A,
        params_V_Dout_A,
        params_V_Clk_A,
        params_V_Rst_A
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input  [31:0] phasein_V_TDATA;
input   phasein_V_TVALID;
output   phasein_V_TREADY;
output  [31:0] dataout_V_TDATA;
output   dataout_V_TVALID;
input   dataout_V_TREADY;
output  [31:0] params_V_Addr_A;
output   params_V_EN_A;
output  [3:0] params_V_WEN_A;
output  [31:0] params_V_Din_A;
input  [31:0] params_V_Dout_A;
output   params_V_Clk_A;
output   params_V_Rst_A;

reg params_V_Rst_A;

reg    ap_rst_n_inv;
reg   [31:0] phasein_V_0_data_out;
wire    phasein_V_0_vld_in;
wire    phasein_V_0_vld_out;
wire    phasein_V_0_ack_in;
reg    phasein_V_0_ack_out;
reg   [31:0] phasein_V_0_payload_A;
reg   [31:0] phasein_V_0_payload_B;
reg    phasein_V_0_sel_rd;
reg    phasein_V_0_sel_wr;
wire    phasein_V_0_sel;
wire    phasein_V_0_load_A;
wire    phasein_V_0_load_B;
reg   [1:0] phasein_V_0_state;
wire    phasein_V_0_state_cmp_full;
reg   [31:0] dataout_V_1_data_out;
reg    dataout_V_1_vld_in;
wire    dataout_V_1_vld_out;
wire    dataout_V_1_ack_in;
wire    dataout_V_1_ack_out;
reg   [31:0] dataout_V_1_payload_A;
reg   [31:0] dataout_V_1_payload_B;
reg    dataout_V_1_sel_rd;
reg    dataout_V_1_sel_wr;
wire    dataout_V_1_sel;
wire    dataout_V_1_load_A;
wire    dataout_V_1_load_B;
reg   [1:0] dataout_V_1_state;
wire    dataout_V_1_state_cmp_full;
wire   [9:0] sinarray_V_address0;
reg    sinarray_V_ce0;
wire   [21:0] sinarray_V_q0;
reg    phasein_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    dataout_V_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [6:0] tmp_2_reg_125;
wire   [31:0] tmp_121_fu_110_p4;
wire   [31:0] tmp_1_cast_fu_91_p1;
wire   [9:0] tmp_cast_fu_81_p4;
wire   [23:0] tmp_data_V_cast_fu_106_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 phasein_V_0_sel_rd = 1'b0;
#0 phasein_V_0_sel_wr = 1'b0;
#0 phasein_V_0_state = 2'd0;
#0 dataout_V_1_sel_rd = 1'b0;
#0 dataout_V_1_sel_wr = 1'b0;
#0 dataout_V_1_state = 2'd0;
#0 ap_CS_fsm = 4'd1;
end

nco_sinarray_V #(
    .DataWidth( 22 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
sinarray_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sinarray_V_address0),
    .ce0(sinarray_V_ce0),
    .q0(sinarray_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dataout_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dataout_V_1_ack_out) & (1'b1 == dataout_V_1_vld_out))) begin
            dataout_V_1_sel_rd <= ~dataout_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dataout_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dataout_V_1_vld_in) & (1'b1 == dataout_V_1_ack_in))) begin
            dataout_V_1_sel_wr <= ~dataout_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dataout_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == dataout_V_1_vld_in) & (1'b1 == dataout_V_1_ack_out) & (2'd3 == dataout_V_1_state)) | ((1'b0 == dataout_V_1_vld_in) & (2'd2 == dataout_V_1_state)))) begin
            dataout_V_1_state <= 2'd2;
        end else if ((((1'b1 == dataout_V_1_vld_in) & (1'b0 == dataout_V_1_ack_out) & (2'd3 == dataout_V_1_state)) | ((1'b0 == dataout_V_1_ack_out) & (2'd1 == dataout_V_1_state)))) begin
            dataout_V_1_state <= 2'd1;
        end else if ((((1'b1 == dataout_V_1_vld_in) & (2'd2 == dataout_V_1_state)) | ((1'b1 == dataout_V_1_ack_out) & (2'd1 == dataout_V_1_state)) | ((2'd3 == dataout_V_1_state) & ~((1'b1 == dataout_V_1_vld_in) & (1'b0 == dataout_V_1_ack_out)) & ~((1'b0 == dataout_V_1_vld_in) & (1'b1 == dataout_V_1_ack_out))))) begin
            dataout_V_1_state <= 2'd3;
        end else begin
            dataout_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        phasein_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == phasein_V_0_ack_out) & (1'b1 == phasein_V_0_vld_out))) begin
            phasein_V_0_sel_rd <= ~phasein_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        phasein_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == phasein_V_0_vld_in) & (1'b1 == phasein_V_0_ack_in))) begin
            phasein_V_0_sel_wr <= ~phasein_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        phasein_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == phasein_V_0_vld_in) & (1'b1 == phasein_V_0_ack_out) & (phasein_V_0_state == 2'd3)) | ((1'b0 == phasein_V_0_vld_in) & (phasein_V_0_state == 2'd2)))) begin
            phasein_V_0_state <= 2'd2;
        end else if ((((1'b1 == phasein_V_0_vld_in) & (1'b0 == phasein_V_0_ack_out) & (phasein_V_0_state == 2'd3)) | ((1'b0 == phasein_V_0_ack_out) & (phasein_V_0_state == 2'd1)))) begin
            phasein_V_0_state <= 2'd1;
        end else if ((((1'b1 == phasein_V_0_vld_in) & (phasein_V_0_state == 2'd2)) | ((1'b1 == phasein_V_0_ack_out) & (phasein_V_0_state == 2'd1)) | ((phasein_V_0_state == 2'd3) & ~((1'b1 == phasein_V_0_vld_in) & (1'b0 == phasein_V_0_ack_out)) & ~((1'b0 == phasein_V_0_vld_in) & (1'b1 == phasein_V_0_ack_out))))) begin
            phasein_V_0_state <= 2'd3;
        end else begin
            phasein_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dataout_V_1_load_A)) begin
        dataout_V_1_payload_A <= tmp_121_fu_110_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dataout_V_1_load_B)) begin
        dataout_V_1_payload_B <= tmp_121_fu_110_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == phasein_V_0_load_A)) begin
        phasein_V_0_payload_A <= phasein_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == phasein_V_0_load_B)) begin
        phasein_V_0_payload_B <= phasein_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (phasein_V_0_vld_out == 1'b1))) begin
        tmp_2_reg_125 <= {{phasein_V_0_data_out[30:24]}};
    end
end

always @ (*) begin
    if ((1'b1 == dataout_V_1_sel)) begin
        dataout_V_1_data_out = dataout_V_1_payload_B;
    end else begin
        dataout_V_1_data_out = dataout_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (dataout_V_1_ack_in == 1'b1))) begin
        dataout_V_1_vld_in = 1'b1;
    end else begin
        dataout_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        dataout_V_TDATA_blk_n = dataout_V_1_state[1'd1];
    end else begin
        dataout_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (phasein_V_0_vld_out == 1'b1))) begin
        phasein_V_0_ack_out = 1'b1;
    end else begin
        phasein_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == phasein_V_0_sel)) begin
        phasein_V_0_data_out = phasein_V_0_payload_B;
    end else begin
        phasein_V_0_data_out = phasein_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        phasein_V_TDATA_blk_n = phasein_V_0_state[1'd0];
    end else begin
        phasein_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (phasein_V_0_vld_out == 1'b1))) begin
        sinarray_V_ce0 = 1'b1;
    end else begin
        sinarray_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (phasein_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (dataout_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (dataout_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dataout_V_1_ack_in = dataout_V_1_state[1'd1];

assign dataout_V_1_ack_out = dataout_V_TREADY;

assign dataout_V_1_load_A = (dataout_V_1_state_cmp_full & ~dataout_V_1_sel_wr);

assign dataout_V_1_load_B = (dataout_V_1_sel_wr & dataout_V_1_state_cmp_full);

assign dataout_V_1_sel = dataout_V_1_sel_rd;

assign dataout_V_1_state_cmp_full = ((dataout_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dataout_V_1_vld_out = dataout_V_1_state[1'd0];

assign dataout_V_TDATA = dataout_V_1_data_out;

assign dataout_V_TVALID = dataout_V_1_state[1'd0];

assign params_V_Addr_A = 32'd0;

assign params_V_Clk_A = ap_clk;

assign params_V_Din_A = 32'd0;

assign params_V_EN_A = 1'b0;

always @ (*) begin
    params_V_Rst_A = ~ap_rst_n;
end

assign params_V_WEN_A = 4'd0;

assign phasein_V_0_ack_in = phasein_V_0_state[1'd1];

assign phasein_V_0_load_A = (phasein_V_0_state_cmp_full & ~phasein_V_0_sel_wr);

assign phasein_V_0_load_B = (phasein_V_0_sel_wr & phasein_V_0_state_cmp_full);

assign phasein_V_0_sel = phasein_V_0_sel_rd;

assign phasein_V_0_state_cmp_full = ((phasein_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign phasein_V_0_vld_in = phasein_V_TVALID;

assign phasein_V_0_vld_out = phasein_V_0_state[1'd0];

assign phasein_V_TREADY = phasein_V_0_state[1'd1];

assign sinarray_V_address0 = tmp_1_cast_fu_91_p1;

assign tmp_121_fu_110_p4 = {{{{1'd0}, {tmp_2_reg_125}}}, {tmp_data_V_cast_fu_106_p1}};

assign tmp_1_cast_fu_91_p1 = tmp_cast_fu_81_p4;

assign tmp_cast_fu_81_p4 = {{phasein_V_0_data_out[21:12]}};

assign tmp_data_V_cast_fu_106_p1 = sinarray_V_q0;

endmodule //nco
