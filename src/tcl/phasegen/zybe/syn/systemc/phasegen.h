// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _phasegen_HH_
#define _phasegen_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct phasegen : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<32> > outval_V_TDATA;
    sc_out< sc_logic > outval_V_TVALID;
    sc_in< sc_logic > outval_V_TREADY;
    sc_out< sc_lv<32> > params_V_Addr_A;
    sc_out< sc_logic > params_V_EN_A;
    sc_out< sc_lv<4> > params_V_WEN_A;
    sc_out< sc_lv<32> > params_V_Din_A;
    sc_in< sc_lv<32> > params_V_Dout_A;
    sc_out< sc_logic > params_V_Clk_A;
    sc_out< sc_logic > params_V_Rst_A;


    // Module declarations
    phasegen(sc_module_name name);
    SC_HAS_PROCESS(phasegen);

    ~phasegen();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<32> > outval_V_1_data_out;
    sc_signal< sc_logic > outval_V_1_vld_in;
    sc_signal< sc_logic > outval_V_1_vld_out;
    sc_signal< sc_logic > outval_V_1_ack_in;
    sc_signal< sc_logic > outval_V_1_ack_out;
    sc_signal< sc_lv<32> > outval_V_1_payload_A;
    sc_signal< sc_lv<32> > outval_V_1_payload_B;
    sc_signal< sc_logic > outval_V_1_sel_rd;
    sc_signal< sc_logic > outval_V_1_sel_wr;
    sc_signal< sc_logic > outval_V_1_sel;
    sc_signal< sc_logic > outval_V_1_load_A;
    sc_signal< sc_logic > outval_V_1_load_B;
    sc_signal< sc_lv<2> > outval_V_1_state;
    sc_signal< sc_logic > outval_V_1_state_cmp_full;
    sc_signal< sc_logic > outval_V_TDATA_blk_n;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<10> > params_V_addr_reg_208;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > currvoice_V_reg_213;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > params_V_addr_1_reg_221;
    sc_signal< sc_lv<3> > currlayer_V_reg_226;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<23> > r_V_fu_128_p2;
    sc_signal< sc_lv<23> > r_V_reg_234;
    sc_signal< sc_lv<23> > r_V_1_fu_145_p2;
    sc_signal< sc_lv<23> > r_V_1_reg_239;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > p_Val2_2_reg_249;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<10> > params_V_addr_3_reg_254;
    sc_signal< sc_lv<32> > p_Val2_3_reg_259;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > p_Val2_4_fu_179_p2;
    sc_signal< sc_lv<32> > p_Val2_4_reg_264;
    sc_signal< sc_lv<32> > tmp11_fu_196_p5;
    sc_signal< sc_lv<32> > tmp_cast_fu_163_p1;
    sc_signal< sc_lv<32> > idx_fu_174_p1;
    sc_signal< sc_lv<32> > params_V_Addr_A_orig;
    sc_signal< sc_lv<32> > tmp_3_cast_fu_134_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > tmp_7_cast_fu_151_p1;
    sc_signal< sc_lv<23> > tmp_1_fu_121_p3;
    sc_signal< sc_lv<23> > tmp_5_fu_138_p3;
    sc_signal< sc_lv<7> > tmp_s_fu_155_p4;
    sc_signal< sc_lv<6> > tmp_2_fu_168_p3;
    sc_signal< sc_lv<4> > tmp_voice_V_fu_193_p1;
    sc_signal< sc_lv<24> > tmp_phase_V_fu_183_p4;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_80;
    static const sc_lv<32> ap_const_lv32_81;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<23> ap_const_lv23_100000;
    static const sc_lv<32> ap_const_lv32_1F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_rst_n_inv();
    void thread_idx_fu_174_p1();
    void thread_outval_V_1_ack_in();
    void thread_outval_V_1_ack_out();
    void thread_outval_V_1_data_out();
    void thread_outval_V_1_load_A();
    void thread_outval_V_1_load_B();
    void thread_outval_V_1_sel();
    void thread_outval_V_1_state_cmp_full();
    void thread_outval_V_1_vld_in();
    void thread_outval_V_1_vld_out();
    void thread_outval_V_TDATA();
    void thread_outval_V_TDATA_blk_n();
    void thread_outval_V_TVALID();
    void thread_p_Val2_4_fu_179_p2();
    void thread_params_V_Addr_A();
    void thread_params_V_Addr_A_orig();
    void thread_params_V_Clk_A();
    void thread_params_V_Din_A();
    void thread_params_V_EN_A();
    void thread_params_V_Rst_A();
    void thread_params_V_WEN_A();
    void thread_params_V_addr_1_reg_221();
    void thread_params_V_addr_reg_208();
    void thread_r_V_1_fu_145_p2();
    void thread_r_V_fu_128_p2();
    void thread_tmp11_fu_196_p5();
    void thread_tmp_1_fu_121_p3();
    void thread_tmp_2_fu_168_p3();
    void thread_tmp_3_cast_fu_134_p1();
    void thread_tmp_5_fu_138_p3();
    void thread_tmp_7_cast_fu_151_p1();
    void thread_tmp_cast_fu_163_p1();
    void thread_tmp_phase_V_fu_183_p4();
    void thread_tmp_s_fu_155_p4();
    void thread_tmp_voice_V_fu_193_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
