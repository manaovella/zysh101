// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "phasegen.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic phasegen::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic phasegen::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> phasegen::ap_ST_fsm_state1 = "1";
const sc_lv<10> phasegen::ap_ST_fsm_state2 = "10";
const sc_lv<10> phasegen::ap_ST_fsm_state3 = "100";
const sc_lv<10> phasegen::ap_ST_fsm_state4 = "1000";
const sc_lv<10> phasegen::ap_ST_fsm_state5 = "10000";
const sc_lv<10> phasegen::ap_ST_fsm_state6 = "100000";
const sc_lv<10> phasegen::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> phasegen::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> phasegen::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> phasegen::ap_ST_fsm_state10 = "1000000000";
const sc_lv<1> phasegen::ap_const_lv1_0 = "0";
const sc_lv<1> phasegen::ap_const_lv1_1 = "1";
const sc_lv<2> phasegen::ap_const_lv2_0 = "00";
const sc_lv<2> phasegen::ap_const_lv2_2 = "10";
const sc_lv<2> phasegen::ap_const_lv2_3 = "11";
const sc_lv<2> phasegen::ap_const_lv2_1 = "1";
const sc_lv<32> phasegen::ap_const_lv32_8 = "1000";
const sc_lv<32> phasegen::ap_const_lv32_9 = "1001";
const sc_lv<32> phasegen::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> phasegen::ap_const_lv32_1 = "1";
const sc_lv<32> phasegen::ap_const_lv32_2 = "10";
const sc_lv<32> phasegen::ap_const_lv32_3 = "11";
const sc_lv<32> phasegen::ap_const_lv32_5 = "101";
const sc_lv<32> phasegen::ap_const_lv32_6 = "110";
const sc_lv<32> phasegen::ap_const_lv32_7 = "111";
const sc_lv<32> phasegen::ap_const_lv32_80 = "10000000";
const sc_lv<32> phasegen::ap_const_lv32_81 = "10000001";
const sc_lv<4> phasegen::ap_const_lv4_0 = "0000";
const sc_lv<4> phasegen::ap_const_lv4_F = "1111";
const sc_lv<32> phasegen::ap_const_lv32_4 = "100";
const sc_lv<32> phasegen::ap_const_lv32_14 = "10100";
const sc_lv<32> phasegen::ap_const_lv32_16 = "10110";
const sc_lv<20> phasegen::ap_const_lv20_0 = "00000000000000000000";
const sc_lv<23> phasegen::ap_const_lv23_100000 = "100000000000000000000";
const sc_lv<32> phasegen::ap_const_lv32_1F = "11111";
const bool phasegen::ap_const_boolean_1 = true;

phasegen::phasegen(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_idx_fu_174_p1);
    sensitive << ( tmp_2_fu_168_p3 );

    SC_METHOD(thread_outval_V_1_ack_in);
    sensitive << ( outval_V_1_state );

    SC_METHOD(thread_outval_V_1_ack_out);
    sensitive << ( outval_V_TREADY );

    SC_METHOD(thread_outval_V_1_data_out);
    sensitive << ( outval_V_1_payload_A );
    sensitive << ( outval_V_1_payload_B );
    sensitive << ( outval_V_1_sel );

    SC_METHOD(thread_outval_V_1_load_A);
    sensitive << ( outval_V_1_sel_wr );
    sensitive << ( outval_V_1_state_cmp_full );

    SC_METHOD(thread_outval_V_1_load_B);
    sensitive << ( outval_V_1_sel_wr );
    sensitive << ( outval_V_1_state_cmp_full );

    SC_METHOD(thread_outval_V_1_sel);
    sensitive << ( outval_V_1_sel_rd );

    SC_METHOD(thread_outval_V_1_state_cmp_full);
    sensitive << ( outval_V_1_state );

    SC_METHOD(thread_outval_V_1_vld_in);
    sensitive << ( outval_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_outval_V_1_vld_out);
    sensitive << ( outval_V_1_state );

    SC_METHOD(thread_outval_V_TDATA);
    sensitive << ( outval_V_1_data_out );

    SC_METHOD(thread_outval_V_TDATA_blk_n);
    sensitive << ( outval_V_1_state );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_outval_V_TVALID);
    sensitive << ( outval_V_1_state );

    SC_METHOD(thread_p_Val2_4_fu_179_p2);
    sensitive << ( p_Val2_2_reg_249 );
    sensitive << ( p_Val2_3_reg_259 );

    SC_METHOD(thread_params_V_Addr_A);
    sensitive << ( params_V_Addr_A_orig );

    SC_METHOD(thread_params_V_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( params_V_addr_reg_208 );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( params_V_addr_1_reg_221 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( params_V_addr_3_reg_254 );
    sensitive << ( tmp_cast_fu_163_p1 );
    sensitive << ( idx_fu_174_p1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_params_V_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_params_V_Din_A);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_Val2_4_reg_264 );
    sensitive << ( tmp_3_cast_fu_134_p1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_7_cast_fu_151_p1 );

    SC_METHOD(thread_params_V_EN_A);
    sensitive << ( outval_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_params_V_Rst_A);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_params_V_WEN_A);
    sensitive << ( outval_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_params_V_addr_1_reg_221);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_params_V_addr_reg_208);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_r_V_1_fu_145_p2);
    sensitive << ( tmp_5_fu_138_p3 );

    SC_METHOD(thread_r_V_fu_128_p2);
    sensitive << ( tmp_1_fu_121_p3 );

    SC_METHOD(thread_tmp11_fu_196_p5);
    sensitive << ( currlayer_V_reg_226 );
    sensitive << ( tmp_voice_V_fu_193_p1 );
    sensitive << ( tmp_phase_V_fu_183_p4 );

    SC_METHOD(thread_tmp_1_fu_121_p3);
    sensitive << ( currvoice_V_reg_213 );

    SC_METHOD(thread_tmp_2_fu_168_p3);
    sensitive << ( currvoice_V_reg_213 );
    sensitive << ( currlayer_V_reg_226 );

    SC_METHOD(thread_tmp_3_cast_fu_134_p1);
    sensitive << ( r_V_reg_234 );

    SC_METHOD(thread_tmp_5_fu_138_p3);
    sensitive << ( currlayer_V_reg_226 );

    SC_METHOD(thread_tmp_7_cast_fu_151_p1);
    sensitive << ( r_V_1_reg_239 );

    SC_METHOD(thread_tmp_cast_fu_163_p1);
    sensitive << ( tmp_s_fu_155_p4 );

    SC_METHOD(thread_tmp_phase_V_fu_183_p4);
    sensitive << ( p_Val2_4_fu_179_p2 );

    SC_METHOD(thread_tmp_s_fu_155_p4);
    sensitive << ( currvoice_V_reg_213 );
    sensitive << ( currlayer_V_reg_226 );

    SC_METHOD(thread_tmp_voice_V_fu_193_p1);
    sensitive << ( currvoice_V_reg_213 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( outval_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    outval_V_1_sel_rd = SC_LOGIC_0;
    outval_V_1_sel_wr = SC_LOGIC_0;
    outval_V_1_state = "00";
    ap_CS_fsm = "0000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "phasegen_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, outval_V_TDATA, "(port)outval_V_TDATA");
    sc_trace(mVcdFile, outval_V_TVALID, "(port)outval_V_TVALID");
    sc_trace(mVcdFile, outval_V_TREADY, "(port)outval_V_TREADY");
    sc_trace(mVcdFile, params_V_Addr_A, "(port)params_V_Addr_A");
    sc_trace(mVcdFile, params_V_EN_A, "(port)params_V_EN_A");
    sc_trace(mVcdFile, params_V_WEN_A, "(port)params_V_WEN_A");
    sc_trace(mVcdFile, params_V_Din_A, "(port)params_V_Din_A");
    sc_trace(mVcdFile, params_V_Dout_A, "(port)params_V_Dout_A");
    sc_trace(mVcdFile, params_V_Clk_A, "(port)params_V_Clk_A");
    sc_trace(mVcdFile, params_V_Rst_A, "(port)params_V_Rst_A");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, outval_V_1_data_out, "outval_V_1_data_out");
    sc_trace(mVcdFile, outval_V_1_vld_in, "outval_V_1_vld_in");
    sc_trace(mVcdFile, outval_V_1_vld_out, "outval_V_1_vld_out");
    sc_trace(mVcdFile, outval_V_1_ack_in, "outval_V_1_ack_in");
    sc_trace(mVcdFile, outval_V_1_ack_out, "outval_V_1_ack_out");
    sc_trace(mVcdFile, outval_V_1_payload_A, "outval_V_1_payload_A");
    sc_trace(mVcdFile, outval_V_1_payload_B, "outval_V_1_payload_B");
    sc_trace(mVcdFile, outval_V_1_sel_rd, "outval_V_1_sel_rd");
    sc_trace(mVcdFile, outval_V_1_sel_wr, "outval_V_1_sel_wr");
    sc_trace(mVcdFile, outval_V_1_sel, "outval_V_1_sel");
    sc_trace(mVcdFile, outval_V_1_load_A, "outval_V_1_load_A");
    sc_trace(mVcdFile, outval_V_1_load_B, "outval_V_1_load_B");
    sc_trace(mVcdFile, outval_V_1_state, "outval_V_1_state");
    sc_trace(mVcdFile, outval_V_1_state_cmp_full, "outval_V_1_state_cmp_full");
    sc_trace(mVcdFile, outval_V_TDATA_blk_n, "outval_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, params_V_addr_reg_208, "params_V_addr_reg_208");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, currvoice_V_reg_213, "currvoice_V_reg_213");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, params_V_addr_1_reg_221, "params_V_addr_1_reg_221");
    sc_trace(mVcdFile, currlayer_V_reg_226, "currlayer_V_reg_226");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, r_V_fu_128_p2, "r_V_fu_128_p2");
    sc_trace(mVcdFile, r_V_reg_234, "r_V_reg_234");
    sc_trace(mVcdFile, r_V_1_fu_145_p2, "r_V_1_fu_145_p2");
    sc_trace(mVcdFile, r_V_1_reg_239, "r_V_1_reg_239");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, p_Val2_2_reg_249, "p_Val2_2_reg_249");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, params_V_addr_3_reg_254, "params_V_addr_3_reg_254");
    sc_trace(mVcdFile, p_Val2_3_reg_259, "p_Val2_3_reg_259");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, p_Val2_4_fu_179_p2, "p_Val2_4_fu_179_p2");
    sc_trace(mVcdFile, p_Val2_4_reg_264, "p_Val2_4_reg_264");
    sc_trace(mVcdFile, tmp11_fu_196_p5, "tmp11_fu_196_p5");
    sc_trace(mVcdFile, tmp_cast_fu_163_p1, "tmp_cast_fu_163_p1");
    sc_trace(mVcdFile, idx_fu_174_p1, "idx_fu_174_p1");
    sc_trace(mVcdFile, params_V_Addr_A_orig, "params_V_Addr_A_orig");
    sc_trace(mVcdFile, tmp_3_cast_fu_134_p1, "tmp_3_cast_fu_134_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_7_cast_fu_151_p1, "tmp_7_cast_fu_151_p1");
    sc_trace(mVcdFile, tmp_1_fu_121_p3, "tmp_1_fu_121_p3");
    sc_trace(mVcdFile, tmp_5_fu_138_p3, "tmp_5_fu_138_p3");
    sc_trace(mVcdFile, tmp_s_fu_155_p4, "tmp_s_fu_155_p4");
    sc_trace(mVcdFile, tmp_2_fu_168_p3, "tmp_2_fu_168_p3");
    sc_trace(mVcdFile, tmp_voice_V_fu_193_p1, "tmp_voice_V_fu_193_p1");
    sc_trace(mVcdFile, tmp_phase_V_fu_183_p4, "tmp_phase_V_fu_183_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("phasegen.hdltvin.dat");
    mHdltvoutHandle.open("phasegen.hdltvout.dat");
}

phasegen::~phasegen() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void phasegen::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outval_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outval_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outval_V_1_vld_out.read()))) {
            outval_V_1_sel_rd =  (sc_logic) (~outval_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outval_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outval_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outval_V_1_ack_in.read()))) {
            outval_V_1_sel_wr =  (sc_logic) (~outval_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outval_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outval_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outval_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(outval_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outval_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(outval_V_1_state.read(), ap_const_lv2_2)))) {
            outval_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outval_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outval_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(outval_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outval_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(outval_V_1_state.read(), ap_const_lv2_1)))) {
            outval_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outval_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(outval_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outval_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(outval_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(outval_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outval_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outval_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outval_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outval_V_1_ack_out.read()))))) {
            outval_V_1_state = ap_const_lv2_3;
        } else {
            outval_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        currlayer_V_reg_226 = params_V_Dout_A.read().range(22, 20);
        r_V_reg_234 = r_V_fu_128_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        currvoice_V_reg_213 = params_V_Dout_A.read().range(22, 20);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outval_V_1_load_A.read())) {
        outval_V_1_payload_A = tmp11_fu_196_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outval_V_1_load_B.read())) {
        outval_V_1_payload_B = tmp11_fu_196_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        p_Val2_2_reg_249 = params_V_Dout_A.read();
        params_V_addr_3_reg_254 =  (sc_lv<10>) (idx_fu_174_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        p_Val2_3_reg_259 = params_V_Dout_A.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(outval_V_1_ack_in.read(), ap_const_logic_1))) {
        p_Val2_4_reg_264 = p_Val2_4_fu_179_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        r_V_1_reg_239 = r_V_1_fu_145_p2.read();
    }
}

void phasegen::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void phasegen::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void phasegen::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void phasegen::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void phasegen::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void phasegen::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void phasegen::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void phasegen::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void phasegen::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void phasegen::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void phasegen::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void phasegen::thread_idx_fu_174_p1() {
    idx_fu_174_p1 = esl_zext<32,6>(tmp_2_fu_168_p3.read());
}

void phasegen::thread_outval_V_1_ack_in() {
    outval_V_1_ack_in = outval_V_1_state.read()[1];
}

void phasegen::thread_outval_V_1_ack_out() {
    outval_V_1_ack_out = outval_V_TREADY.read();
}

void phasegen::thread_outval_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outval_V_1_sel.read())) {
        outval_V_1_data_out = outval_V_1_payload_B.read();
    } else {
        outval_V_1_data_out = outval_V_1_payload_A.read();
    }
}

void phasegen::thread_outval_V_1_load_A() {
    outval_V_1_load_A = (outval_V_1_state_cmp_full.read() & ~outval_V_1_sel_wr.read());
}

void phasegen::thread_outval_V_1_load_B() {
    outval_V_1_load_B = (outval_V_1_sel_wr.read() & outval_V_1_state_cmp_full.read());
}

void phasegen::thread_outval_V_1_sel() {
    outval_V_1_sel = outval_V_1_sel_rd.read();
}

void phasegen::thread_outval_V_1_state_cmp_full() {
    outval_V_1_state_cmp_full =  (sc_logic) ((!outval_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outval_V_1_state.read() != ap_const_lv2_1))[0];
}

void phasegen::thread_outval_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(outval_V_1_ack_in.read(), ap_const_logic_1))) {
        outval_V_1_vld_in = ap_const_logic_1;
    } else {
        outval_V_1_vld_in = ap_const_logic_0;
    }
}

void phasegen::thread_outval_V_1_vld_out() {
    outval_V_1_vld_out = outval_V_1_state.read()[0];
}

void phasegen::thread_outval_V_TDATA() {
    outval_V_TDATA = outval_V_1_data_out.read();
}

void phasegen::thread_outval_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        outval_V_TDATA_blk_n = outval_V_1_state.read()[1];
    } else {
        outval_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void phasegen::thread_outval_V_TVALID() {
    outval_V_TVALID = outval_V_1_state.read()[0];
}

void phasegen::thread_p_Val2_4_fu_179_p2() {
    p_Val2_4_fu_179_p2 = (!p_Val2_2_reg_249.read().is_01() || !p_Val2_3_reg_259.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_Val2_2_reg_249.read()) + sc_biguint<32>(p_Val2_3_reg_259.read()));
}

void phasegen::thread_params_V_Addr_A() {
    params_V_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): params_V_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void phasegen::thread_params_V_Addr_A_orig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        params_V_Addr_A_orig =  (sc_lv<32>) (params_V_addr_3_reg_254.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        params_V_Addr_A_orig = idx_fu_174_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        params_V_Addr_A_orig = tmp_cast_fu_163_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        params_V_Addr_A_orig =  (sc_lv<32>) (params_V_addr_1_reg_221.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        params_V_Addr_A_orig =  (sc_lv<32>) (params_V_addr_reg_208.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        params_V_Addr_A_orig = ap_const_lv32_81;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        params_V_Addr_A_orig = ap_const_lv32_80;
    } else {
        params_V_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void phasegen::thread_params_V_Clk_A() {
    params_V_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void phasegen::thread_params_V_Din_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        params_V_Din_A = p_Val2_4_reg_264.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        params_V_Din_A = tmp_7_cast_fu_151_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        params_V_Din_A = tmp_3_cast_fu_134_p1.read();
    } else {
        params_V_Din_A = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void phasegen::thread_params_V_EN_A() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(outval_V_1_ack_in.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        params_V_EN_A = ap_const_logic_1;
    } else {
        params_V_EN_A = ap_const_logic_0;
    }
}

void phasegen::thread_params_V_Rst_A() {
    params_V_Rst_A =  (sc_logic) (~ap_rst_n.read());
}

void phasegen::thread_params_V_WEN_A() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(outval_V_1_ack_in.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        params_V_WEN_A = ap_const_lv4_F;
    } else {
        params_V_WEN_A = ap_const_lv4_0;
    }
}

void phasegen::thread_params_V_addr_1_reg_221() {
    params_V_addr_1_reg_221 =  (sc_lv<10>) (ap_const_lv32_81);
}

void phasegen::thread_params_V_addr_reg_208() {
    params_V_addr_reg_208 =  (sc_lv<10>) (ap_const_lv32_80);
}

void phasegen::thread_r_V_1_fu_145_p2() {
    r_V_1_fu_145_p2 = (!tmp_5_fu_138_p3.read().is_01() || !ap_const_lv23_100000.is_01())? sc_lv<23>(): (sc_biguint<23>(tmp_5_fu_138_p3.read()) + sc_biguint<23>(ap_const_lv23_100000));
}

void phasegen::thread_r_V_fu_128_p2() {
    r_V_fu_128_p2 = (!tmp_1_fu_121_p3.read().is_01() || !ap_const_lv23_100000.is_01())? sc_lv<23>(): (sc_biguint<23>(tmp_1_fu_121_p3.read()) + sc_biguint<23>(ap_const_lv23_100000));
}

void phasegen::thread_tmp11_fu_196_p5() {
    tmp11_fu_196_p5 = esl_concat<8,24>(esl_concat<4,4>(esl_concat<1,3>(ap_const_lv1_0, currlayer_V_reg_226.read()), tmp_voice_V_fu_193_p1.read()), tmp_phase_V_fu_183_p4.read());
}

void phasegen::thread_tmp_1_fu_121_p3() {
    tmp_1_fu_121_p3 = esl_concat<3,20>(currvoice_V_reg_213.read(), ap_const_lv20_0);
}

void phasegen::thread_tmp_2_fu_168_p3() {
    tmp_2_fu_168_p3 = esl_concat<3,3>(currlayer_V_reg_226.read(), currvoice_V_reg_213.read());
}

void phasegen::thread_tmp_3_cast_fu_134_p1() {
    tmp_3_cast_fu_134_p1 = esl_zext<32,23>(r_V_reg_234.read());
}

void phasegen::thread_tmp_5_fu_138_p3() {
    tmp_5_fu_138_p3 = esl_concat<3,20>(currlayer_V_reg_226.read(), ap_const_lv20_0);
}

void phasegen::thread_tmp_7_cast_fu_151_p1() {
    tmp_7_cast_fu_151_p1 = esl_zext<32,23>(r_V_1_reg_239.read());
}

void phasegen::thread_tmp_cast_fu_163_p1() {
    tmp_cast_fu_163_p1 = esl_zext<32,7>(tmp_s_fu_155_p4.read());
}

void phasegen::thread_tmp_phase_V_fu_183_p4() {
    tmp_phase_V_fu_183_p4 = p_Val2_4_fu_179_p2.read().range(31, 8);
}

void phasegen::thread_tmp_s_fu_155_p4() {
    tmp_s_fu_155_p4 = esl_concat<4,3>(esl_concat<1,3>(ap_const_lv1_1, currlayer_V_reg_226.read()), currvoice_V_reg_213.read());
}

void phasegen::thread_tmp_voice_V_fu_193_p1() {
    tmp_voice_V_fu_193_p1 = esl_zext<4,3>(currvoice_V_reg_213.read());
}

void phasegen::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(outval_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(outval_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

void phasegen::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"outval_V_TDATA\" :  \"" << outval_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outval_V_TVALID\" :  \"" << outval_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outval_V_TREADY\" :  \"" << outval_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_Addr_A\" :  \"" << params_V_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_EN_A\" :  \"" << params_V_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_WEN_A\" :  \"" << params_V_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_Din_A\" :  \"" << params_V_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"params_V_Dout_A\" :  \"" << params_V_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_Clk_A\" :  \"" << params_V_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_Rst_A\" :  \"" << params_V_Rst_A.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

