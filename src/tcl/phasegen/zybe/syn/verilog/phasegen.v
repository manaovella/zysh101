// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="phasegen,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg225-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.254000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=441,HLS_SYN_LUT=266}" *)

module phasegen (
        ap_clk,
        ap_rst_n,
        outval_V_TDATA,
        outval_V_TVALID,
        outval_V_TREADY,
        params_V_Addr_A,
        params_V_EN_A,
        params_V_WEN_A,
        params_V_Din_A,
        params_V_Dout_A,
        params_V_Clk_A,
        params_V_Rst_A
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst_n;
output  [31:0] outval_V_TDATA;
output   outval_V_TVALID;
input   outval_V_TREADY;
output  [31:0] params_V_Addr_A;
output   params_V_EN_A;
output  [3:0] params_V_WEN_A;
output  [31:0] params_V_Din_A;
input  [31:0] params_V_Dout_A;
output   params_V_Clk_A;
output   params_V_Rst_A;

reg params_V_EN_A;
reg[3:0] params_V_WEN_A;
reg[31:0] params_V_Din_A;
reg params_V_Rst_A;

reg    ap_rst_n_inv;
reg   [31:0] outval_V_1_data_out;
reg    outval_V_1_vld_in;
wire    outval_V_1_vld_out;
wire    outval_V_1_ack_in;
wire    outval_V_1_ack_out;
reg   [31:0] outval_V_1_payload_A;
reg   [31:0] outval_V_1_payload_B;
reg    outval_V_1_sel_rd;
reg    outval_V_1_sel_wr;
wire    outval_V_1_sel;
wire    outval_V_1_load_A;
wire    outval_V_1_load_B;
reg   [1:0] outval_V_1_state;
wire    outval_V_1_state_cmp_full;
reg    outval_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire   [9:0] params_V_addr_reg_208;
wire    ap_CS_fsm_state1;
reg   [2:0] currvoice_V_reg_213;
wire    ap_CS_fsm_state2;
wire   [9:0] params_V_addr_1_reg_221;
reg   [2:0] currlayer_V_reg_226;
wire    ap_CS_fsm_state3;
wire   [22:0] r_V_fu_128_p2;
reg   [22:0] r_V_reg_234;
wire   [22:0] r_V_1_fu_145_p2;
reg   [22:0] r_V_1_reg_239;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
reg   [31:0] p_Val2_2_reg_249;
wire    ap_CS_fsm_state7;
reg   [9:0] params_V_addr_3_reg_254;
reg   [31:0] p_Val2_3_reg_259;
wire    ap_CS_fsm_state8;
wire   [31:0] p_Val2_4_fu_179_p2;
reg   [31:0] p_Val2_4_reg_264;
wire   [31:0] tmp11_fu_196_p5;
wire   [31:0] tmp_cast_fu_163_p1;
wire   [31:0] idx_fu_174_p1;
reg   [31:0] params_V_Addr_A_orig;
wire   [31:0] tmp_3_cast_fu_134_p1;
wire    ap_CS_fsm_state5;
wire   [31:0] tmp_7_cast_fu_151_p1;
wire   [22:0] tmp_1_fu_121_p3;
wire   [22:0] tmp_5_fu_138_p3;
wire   [6:0] tmp_s_fu_155_p4;
wire   [5:0] tmp_2_fu_168_p3;
wire   [3:0] tmp_voice_V_fu_193_p1;
wire   [23:0] tmp_phase_V_fu_183_p4;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 outval_V_1_sel_rd = 1'b0;
#0 outval_V_1_sel_wr = 1'b0;
#0 outval_V_1_state = 2'd0;
#0 ap_CS_fsm = 10'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outval_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outval_V_1_ack_out) & (1'b1 == outval_V_1_vld_out))) begin
            outval_V_1_sel_rd <= ~outval_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outval_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outval_V_1_vld_in) & (1'b1 == outval_V_1_ack_in))) begin
            outval_V_1_sel_wr <= ~outval_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outval_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == outval_V_1_vld_in) & (1'b1 == outval_V_1_ack_out) & (outval_V_1_state == 2'd3)) | ((1'b0 == outval_V_1_vld_in) & (outval_V_1_state == 2'd2)))) begin
            outval_V_1_state <= 2'd2;
        end else if ((((1'b1 == outval_V_1_vld_in) & (1'b0 == outval_V_1_ack_out) & (outval_V_1_state == 2'd3)) | ((1'b0 == outval_V_1_ack_out) & (outval_V_1_state == 2'd1)))) begin
            outval_V_1_state <= 2'd1;
        end else if ((((1'b1 == outval_V_1_vld_in) & (outval_V_1_state == 2'd2)) | ((1'b1 == outval_V_1_ack_out) & (outval_V_1_state == 2'd1)) | ((outval_V_1_state == 2'd3) & ~((1'b1 == outval_V_1_vld_in) & (1'b0 == outval_V_1_ack_out)) & ~((1'b0 == outval_V_1_vld_in) & (1'b1 == outval_V_1_ack_out))))) begin
            outval_V_1_state <= 2'd3;
        end else begin
            outval_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        currlayer_V_reg_226 <= {{params_V_Dout_A[22:20]}};
        r_V_reg_234[22 : 20] <= r_V_fu_128_p2[22 : 20];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        currvoice_V_reg_213 <= {{params_V_Dout_A[22:20]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outval_V_1_load_A)) begin
        outval_V_1_payload_A <= tmp11_fu_196_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outval_V_1_load_B)) begin
        outval_V_1_payload_B <= tmp11_fu_196_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_2_reg_249 <= params_V_Dout_A;
        params_V_addr_3_reg_254[5 : 0] <= idx_fu_174_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_3_reg_259 <= params_V_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (outval_V_1_ack_in == 1'b1))) begin
        p_Val2_4_reg_264 <= p_Val2_4_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_V_1_reg_239[22 : 20] <= r_V_1_fu_145_p2[22 : 20];
    end
end

always @ (*) begin
    if ((1'b1 == outval_V_1_sel)) begin
        outval_V_1_data_out = outval_V_1_payload_B;
    end else begin
        outval_V_1_data_out = outval_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (outval_V_1_ack_in == 1'b1))) begin
        outval_V_1_vld_in = 1'b1;
    end else begin
        outval_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        outval_V_TDATA_blk_n = outval_V_1_state[1'd1];
    end else begin
        outval_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        params_V_Addr_A_orig = params_V_addr_3_reg_254;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        params_V_Addr_A_orig = idx_fu_174_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        params_V_Addr_A_orig = tmp_cast_fu_163_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        params_V_Addr_A_orig = params_V_addr_1_reg_221;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        params_V_Addr_A_orig = params_V_addr_reg_208;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        params_V_Addr_A_orig = 32'd129;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        params_V_Addr_A_orig = 32'd128;
    end else begin
        params_V_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        params_V_Din_A = p_Val2_4_reg_264;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        params_V_Din_A = tmp_7_cast_fu_151_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        params_V_Din_A = tmp_3_cast_fu_134_p1;
    end else begin
        params_V_Din_A = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state10) & (outval_V_1_ack_in == 1'b1)) | (1'b1 == ap_CS_fsm_state5))) begin
        params_V_EN_A = 1'b1;
    end else begin
        params_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state10) & (outval_V_1_ack_in == 1'b1)) | (1'b1 == ap_CS_fsm_state5))) begin
        params_V_WEN_A = 4'd15;
    end else begin
        params_V_WEN_A = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (outval_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (outval_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign idx_fu_174_p1 = tmp_2_fu_168_p3;

assign outval_V_1_ack_in = outval_V_1_state[1'd1];

assign outval_V_1_ack_out = outval_V_TREADY;

assign outval_V_1_load_A = (outval_V_1_state_cmp_full & ~outval_V_1_sel_wr);

assign outval_V_1_load_B = (outval_V_1_sel_wr & outval_V_1_state_cmp_full);

assign outval_V_1_sel = outval_V_1_sel_rd;

assign outval_V_1_state_cmp_full = ((outval_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outval_V_1_vld_out = outval_V_1_state[1'd0];

assign outval_V_TDATA = outval_V_1_data_out;

assign outval_V_TVALID = outval_V_1_state[1'd0];

assign p_Val2_4_fu_179_p2 = (p_Val2_2_reg_249 + p_Val2_3_reg_259);

assign params_V_Addr_A = params_V_Addr_A_orig << 32'd2;

assign params_V_Clk_A = ap_clk;

always @ (*) begin
    params_V_Rst_A = ~ap_rst_n;
end

assign params_V_addr_1_reg_221 = 32'd129;

assign params_V_addr_reg_208 = 32'd128;

assign r_V_1_fu_145_p2 = (tmp_5_fu_138_p3 + 23'd1048576);

assign r_V_fu_128_p2 = (tmp_1_fu_121_p3 + 23'd1048576);

assign tmp11_fu_196_p5 = {{{{{{1'd0}, {currlayer_V_reg_226}}}, {tmp_voice_V_fu_193_p1}}}, {tmp_phase_V_fu_183_p4}};

assign tmp_1_fu_121_p3 = {{currvoice_V_reg_213}, {20'd0}};

assign tmp_2_fu_168_p3 = {{currlayer_V_reg_226}, {currvoice_V_reg_213}};

assign tmp_3_cast_fu_134_p1 = r_V_reg_234;

assign tmp_5_fu_138_p3 = {{currlayer_V_reg_226}, {20'd0}};

assign tmp_7_cast_fu_151_p1 = r_V_1_reg_239;

assign tmp_cast_fu_163_p1 = tmp_s_fu_155_p4;

assign tmp_phase_V_fu_183_p4 = {{p_Val2_4_fu_179_p2[31:8]}};

assign tmp_s_fu_155_p4 = {{{{1'd1}, {currlayer_V_reg_226}}}, {currvoice_V_reg_213}};

assign tmp_voice_V_fu_193_p1 = currvoice_V_reg_213;

always @ (posedge ap_clk) begin
    r_V_reg_234[19:0] <= 20'b00000000000000000000;
    r_V_1_reg_239[19:0] <= 20'b00000000000000000000;
    params_V_addr_3_reg_254[9:6] <= 4'b0000;
end

endmodule //phasegen
