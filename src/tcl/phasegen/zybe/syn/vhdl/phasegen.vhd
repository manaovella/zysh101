-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity phasegen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    outval_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outval_V_TVALID : OUT STD_LOGIC;
    outval_V_TREADY : IN STD_LOGIC;
    params_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_V_EN_A : OUT STD_LOGIC;
    params_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    params_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    params_V_Clk_A : OUT STD_LOGIC;
    params_V_Rst_A : OUT STD_LOGIC );
end;


architecture behav of phasegen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "phasegen,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg225-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.254000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=441,HLS_SYN_LUT=266}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv23_100000 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal outval_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal outval_V_1_vld_in : STD_LOGIC;
    signal outval_V_1_vld_out : STD_LOGIC;
    signal outval_V_1_ack_in : STD_LOGIC;
    signal outval_V_1_ack_out : STD_LOGIC;
    signal outval_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal outval_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal outval_V_1_sel_rd : STD_LOGIC := '0';
    signal outval_V_1_sel_wr : STD_LOGIC := '0';
    signal outval_V_1_sel : STD_LOGIC;
    signal outval_V_1_load_A : STD_LOGIC;
    signal outval_V_1_load_B : STD_LOGIC;
    signal outval_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outval_V_1_state_cmp_full : STD_LOGIC;
    signal outval_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal params_V_addr_reg_208 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal currvoice_V_reg_213 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal params_V_addr_1_reg_221 : STD_LOGIC_VECTOR (9 downto 0);
    signal currlayer_V_reg_226 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_V_fu_128_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_reg_234 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_1_fu_145_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_1_reg_239 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_Val2_2_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal params_V_addr_3_reg_254 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_3_reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_Val2_4_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_fu_196_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_fu_163_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_fu_174_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_cast_fu_134_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_7_cast_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_121_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_5_fu_138_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_s_fu_155_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_168_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_voice_V_fu_193_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_phase_V_fu_183_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    outval_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outval_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outval_V_1_ack_out) and (ap_const_logic_1 = outval_V_1_vld_out))) then 
                                        outval_V_1_sel_rd <= not(outval_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outval_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outval_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outval_V_1_vld_in) and (ap_const_logic_1 = outval_V_1_ack_in))) then 
                                        outval_V_1_sel_wr <= not(outval_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outval_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outval_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outval_V_1_vld_in) and (ap_const_logic_1 = outval_V_1_ack_out) and (outval_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = outval_V_1_vld_in) and (outval_V_1_state = ap_const_lv2_2)))) then 
                    outval_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outval_V_1_vld_in) and (ap_const_logic_0 = outval_V_1_ack_out) and (outval_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = outval_V_1_ack_out) and (outval_V_1_state = ap_const_lv2_1)))) then 
                    outval_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outval_V_1_vld_in) and (outval_V_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = outval_V_1_ack_out) and (outval_V_1_state = ap_const_lv2_1)) or ((outval_V_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = outval_V_1_vld_in) and (ap_const_logic_0 = outval_V_1_ack_out))) and not(((ap_const_logic_0 = outval_V_1_vld_in) and (ap_const_logic_1 = outval_V_1_ack_out)))))) then 
                    outval_V_1_state <= ap_const_lv2_3;
                else 
                    outval_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                currlayer_V_reg_226 <= params_V_Dout_A(22 downto 20);
                    r_V_reg_234(22 downto 20) <= r_V_fu_128_p2(22 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                currvoice_V_reg_213 <= params_V_Dout_A(22 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outval_V_1_load_A)) then
                outval_V_1_payload_A <= tmp11_fu_196_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outval_V_1_load_B)) then
                outval_V_1_payload_B <= tmp11_fu_196_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Val2_2_reg_249 <= params_V_Dout_A;
                    params_V_addr_3_reg_254(5 downto 0) <= idx_fu_174_p1(10 - 1 downto 0)(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_3_reg_259 <= params_V_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (outval_V_1_ack_in = ap_const_logic_1))) then
                p_Val2_4_reg_264 <= p_Val2_4_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    r_V_1_reg_239(22 downto 20) <= r_V_1_fu_145_p2(22 downto 20);
            end if;
        end if;
    end process;
    r_V_reg_234(19 downto 0) <= "00000000000000000000";
    r_V_1_reg_239(19 downto 0) <= "00000000000000000000";
    params_V_addr_3_reg_254(9 downto 6) <= "0000";

    ap_NS_fsm_assign_proc : process (outval_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (outval_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (outval_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    idx_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_168_p3),32));
    outval_V_1_ack_in <= outval_V_1_state(1);
    outval_V_1_ack_out <= outval_V_TREADY;

    outval_V_1_data_out_assign_proc : process(outval_V_1_payload_A, outval_V_1_payload_B, outval_V_1_sel)
    begin
        if ((ap_const_logic_1 = outval_V_1_sel)) then 
            outval_V_1_data_out <= outval_V_1_payload_B;
        else 
            outval_V_1_data_out <= outval_V_1_payload_A;
        end if; 
    end process;

    outval_V_1_load_A <= (outval_V_1_state_cmp_full and not(outval_V_1_sel_wr));
    outval_V_1_load_B <= (outval_V_1_sel_wr and outval_V_1_state_cmp_full);
    outval_V_1_sel <= outval_V_1_sel_rd;
    outval_V_1_state_cmp_full <= '0' when (outval_V_1_state = ap_const_lv2_1) else '1';

    outval_V_1_vld_in_assign_proc : process(outval_V_1_ack_in, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (outval_V_1_ack_in = ap_const_logic_1))) then 
            outval_V_1_vld_in <= ap_const_logic_1;
        else 
            outval_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outval_V_1_vld_out <= outval_V_1_state(0);
    outval_V_TDATA <= outval_V_1_data_out;

    outval_V_TDATA_blk_n_assign_proc : process(outval_V_1_state, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            outval_V_TDATA_blk_n <= outval_V_1_state(1);
        else 
            outval_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outval_V_TVALID <= outval_V_1_state(0);
    p_Val2_4_fu_179_p2 <= std_logic_vector(unsigned(p_Val2_2_reg_249) + unsigned(p_Val2_3_reg_259));
    params_V_Addr_A <= std_logic_vector(shift_left(unsigned(params_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    params_V_Addr_A_orig_assign_proc : process(ap_CS_fsm_state10, params_V_addr_reg_208, ap_CS_fsm_state1, ap_CS_fsm_state2, params_V_addr_1_reg_221, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, params_V_addr_3_reg_254, tmp_cast_fu_163_p1, idx_fu_174_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            params_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(params_V_addr_3_reg_254),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            params_V_Addr_A_orig <= idx_fu_174_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            params_V_Addr_A_orig <= tmp_cast_fu_163_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            params_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(params_V_addr_1_reg_221),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            params_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(params_V_addr_reg_208),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            params_V_Addr_A_orig <= ap_const_lv32_81;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            params_V_Addr_A_orig <= ap_const_lv32_80;
        else 
            params_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    params_V_Clk_A <= ap_clk;

    params_V_Din_A_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state4, p_Val2_4_reg_264, tmp_3_cast_fu_134_p1, ap_CS_fsm_state5, tmp_7_cast_fu_151_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            params_V_Din_A <= p_Val2_4_reg_264;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            params_V_Din_A <= tmp_7_cast_fu_151_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            params_V_Din_A <= tmp_3_cast_fu_134_p1;
        else 
            params_V_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    params_V_EN_A_assign_proc : process(outval_V_1_ack_in, ap_CS_fsm_state10, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (outval_V_1_ack_in = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            params_V_EN_A <= ap_const_logic_1;
        else 
            params_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    params_V_Rst_A_assign_proc : process(ap_rst_n)
    begin
                params_V_Rst_A <= not(ap_rst_n);
    end process;


    params_V_WEN_A_assign_proc : process(outval_V_1_ack_in, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (outval_V_1_ack_in = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            params_V_WEN_A <= ap_const_lv4_F;
        else 
            params_V_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    params_V_addr_1_reg_221 <= ap_const_lv32_81(10 - 1 downto 0);
    params_V_addr_reg_208 <= ap_const_lv32_80(10 - 1 downto 0);
    r_V_1_fu_145_p2 <= std_logic_vector(unsigned(tmp_5_fu_138_p3) + unsigned(ap_const_lv23_100000));
    r_V_fu_128_p2 <= std_logic_vector(unsigned(tmp_1_fu_121_p3) + unsigned(ap_const_lv23_100000));
    tmp11_fu_196_p5 <= (((ap_const_lv1_0 & currlayer_V_reg_226) & tmp_voice_V_fu_193_p1) & tmp_phase_V_fu_183_p4);
    tmp_1_fu_121_p3 <= (currvoice_V_reg_213 & ap_const_lv20_0);
    tmp_2_fu_168_p3 <= (currlayer_V_reg_226 & currvoice_V_reg_213);
    tmp_3_cast_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_234),32));
    tmp_5_fu_138_p3 <= (currlayer_V_reg_226 & ap_const_lv20_0);
    tmp_7_cast_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_reg_239),32));
    tmp_cast_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_155_p4),32));
    tmp_phase_V_fu_183_p4 <= p_Val2_4_fu_179_p2(31 downto 8);
    tmp_s_fu_155_p4 <= ((ap_const_lv1_1 & currlayer_V_reg_226) & currvoice_V_reg_213);
    tmp_voice_V_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(currvoice_V_reg_213),4));
end behav;
