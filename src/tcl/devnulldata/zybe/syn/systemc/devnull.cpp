// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "devnull.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic devnull::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic devnull::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> devnull::ap_ST_fsm_state1 = "1";
const sc_lv<4> devnull::ap_ST_fsm_state2 = "10";
const sc_lv<4> devnull::ap_ST_fsm_state3 = "100";
const sc_lv<4> devnull::ap_ST_fsm_state4 = "1000";
const sc_lv<32> devnull::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> devnull::ap_const_lv32_1 = "1";
const sc_lv<32> devnull::ap_const_lv32_2 = "10";
const sc_lv<32> devnull::ap_const_lv32_3 = "11";
const sc_lv<4> devnull::ap_const_lv4_0 = "0000";
const sc_lv<4> devnull::ap_const_lv4_F = "1111";
const sc_lv<1> devnull::ap_const_lv1_1 = "1";
const bool devnull::ap_const_boolean_1 = true;

devnull::devnull(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_54_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_54_p2 );

    SC_METHOD(thread_counter_V_fu_59_p2);
    sensitive << ( t_V_reg_43 );

    SC_METHOD(thread_exitcond_fu_54_p2);
    sensitive << ( max_V_reg_70 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( t_V_reg_43 );

    SC_METHOD(thread_params_V_Addr_A);
    sensitive << ( params_V_Addr_A_orig );

    SC_METHOD(thread_params_V_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_params_V_Din_A);
    sensitive << ( counter_V_reg_83 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_params_V_EN_A);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_params_V_WEN_A);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_54_p2 );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "devnull_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, params_V_Addr_A, "(port)params_V_Addr_A");
    sc_trace(mVcdFile, params_V_EN_A, "(port)params_V_EN_A");
    sc_trace(mVcdFile, params_V_WEN_A, "(port)params_V_WEN_A");
    sc_trace(mVcdFile, params_V_Din_A, "(port)params_V_Din_A");
    sc_trace(mVcdFile, params_V_Dout_A, "(port)params_V_Dout_A");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, max_V_reg_70, "max_V_reg_70");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, counter_V_fu_59_p2, "counter_V_fu_59_p2");
    sc_trace(mVcdFile, counter_V_reg_83, "counter_V_reg_83");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, t_V_reg_43, "t_V_reg_43");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, params_V_Addr_A_orig, "params_V_Addr_A_orig");
    sc_trace(mVcdFile, exitcond_fu_54_p2, "exitcond_fu_54_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

devnull::~devnull() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void devnull::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        t_V_reg_43 = counter_V_reg_83.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        t_V_reg_43 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        counter_V_reg_83 = counter_V_fu_59_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        max_V_reg_70 = params_V_Dout_A.read();
    }
}

void devnull::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void devnull::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void devnull::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void devnull::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void devnull::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_54_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void devnull::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void devnull::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_54_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void devnull::thread_counter_V_fu_59_p2() {
    counter_V_fu_59_p2 = (!t_V_reg_43.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(t_V_reg_43.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void devnull::thread_exitcond_fu_54_p2() {
    exitcond_fu_54_p2 = (!t_V_reg_43.read().is_01() || !max_V_reg_70.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_reg_43.read() == max_V_reg_70.read());
}

void devnull::thread_params_V_Addr_A() {
    params_V_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): params_V_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void devnull::thread_params_V_Addr_A_orig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        params_V_Addr_A_orig = ap_const_lv32_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        params_V_Addr_A_orig = ap_const_lv32_0;
    } else {
        params_V_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void devnull::thread_params_V_Din_A() {
    params_V_Din_A = counter_V_reg_83.read();
}

void devnull::thread_params_V_EN_A() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        params_V_EN_A = ap_const_logic_1;
    } else {
        params_V_EN_A = ap_const_logic_0;
    }
}

void devnull::thread_params_V_WEN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        params_V_WEN_A = ap_const_lv4_F;
    } else {
        params_V_WEN_A = ap_const_lv4_0;
    }
}

void devnull::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_54_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

