// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "datadevnull.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic datadevnull::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic datadevnull::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> datadevnull::ap_ST_fsm_state1 = "1";
const sc_lv<2> datadevnull::ap_ST_fsm_state2 = "10";
const sc_lv<1> datadevnull::ap_const_lv1_1 = "1";
const sc_lv<2> datadevnull::ap_const_lv2_0 = "00";
const sc_lv<2> datadevnull::ap_const_lv2_2 = "10";
const sc_lv<2> datadevnull::ap_const_lv2_3 = "11";
const sc_lv<2> datadevnull::ap_const_lv2_1 = "1";
const sc_lv<32> datadevnull::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> datadevnull::ap_const_lv32_1 = "1";
const bool datadevnull::ap_const_boolean_1 = true;

datadevnull::datadevnull(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_devnull_fu_34 = new devnull("grp_devnull_fu_34");
    grp_devnull_fu_34->ap_clk(ap_clk);
    grp_devnull_fu_34->ap_rst(ap_rst_n_inv);
    grp_devnull_fu_34->ap_start(grp_devnull_fu_34_ap_start);
    grp_devnull_fu_34->ap_done(grp_devnull_fu_34_ap_done);
    grp_devnull_fu_34->ap_idle(grp_devnull_fu_34_ap_idle);
    grp_devnull_fu_34->ap_ready(grp_devnull_fu_34_ap_ready);
    grp_devnull_fu_34->params_V_Addr_A(grp_devnull_fu_34_params_V_Addr_A);
    grp_devnull_fu_34->params_V_EN_A(grp_devnull_fu_34_params_V_EN_A);
    grp_devnull_fu_34->params_V_WEN_A(grp_devnull_fu_34_params_V_WEN_A);
    grp_devnull_fu_34->params_V_Din_A(grp_devnull_fu_34_params_V_Din_A);
    grp_devnull_fu_34->params_V_Dout_A(params_V_Dout_A);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_devnull_fu_34_ap_start);
    sensitive << ( ap_reg_grp_devnull_fu_34_ap_start );

    SC_METHOD(thread_inv_V_0_ack_out);

    SC_METHOD(thread_inv_V_0_vld_in);
    sensitive << ( inv_V_TVALID );

    SC_METHOD(thread_inv_V_TREADY);
    sensitive << ( inv_V_0_state );

    SC_METHOD(thread_params_V_Addr_A);
    sensitive << ( grp_devnull_fu_34_params_V_Addr_A );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_params_V_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_params_V_Din_A);
    sensitive << ( grp_devnull_fu_34_params_V_Din_A );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_params_V_EN_A);
    sensitive << ( grp_devnull_fu_34_params_V_EN_A );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_params_V_Rst_A);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_params_V_WEN_A);
    sensitive << ( grp_devnull_fu_34_params_V_WEN_A );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( grp_devnull_fu_34_ap_done );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    inv_V_0_state = "00";
    ap_reg_grp_devnull_fu_34_ap_start = SC_LOGIC_0;
    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "datadevnull_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, inv_V_TDATA, "(port)inv_V_TDATA");
    sc_trace(mVcdFile, inv_V_TVALID, "(port)inv_V_TVALID");
    sc_trace(mVcdFile, inv_V_TREADY, "(port)inv_V_TREADY");
    sc_trace(mVcdFile, params_V_Addr_A, "(port)params_V_Addr_A");
    sc_trace(mVcdFile, params_V_EN_A, "(port)params_V_EN_A");
    sc_trace(mVcdFile, params_V_WEN_A, "(port)params_V_WEN_A");
    sc_trace(mVcdFile, params_V_Din_A, "(port)params_V_Din_A");
    sc_trace(mVcdFile, params_V_Dout_A, "(port)params_V_Dout_A");
    sc_trace(mVcdFile, params_V_Clk_A, "(port)params_V_Clk_A");
    sc_trace(mVcdFile, params_V_Rst_A, "(port)params_V_Rst_A");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, inv_V_0_vld_in, "inv_V_0_vld_in");
    sc_trace(mVcdFile, inv_V_0_ack_out, "inv_V_0_ack_out");
    sc_trace(mVcdFile, inv_V_0_state, "inv_V_0_state");
    sc_trace(mVcdFile, grp_devnull_fu_34_ap_start, "grp_devnull_fu_34_ap_start");
    sc_trace(mVcdFile, grp_devnull_fu_34_ap_done, "grp_devnull_fu_34_ap_done");
    sc_trace(mVcdFile, grp_devnull_fu_34_ap_idle, "grp_devnull_fu_34_ap_idle");
    sc_trace(mVcdFile, grp_devnull_fu_34_ap_ready, "grp_devnull_fu_34_ap_ready");
    sc_trace(mVcdFile, grp_devnull_fu_34_params_V_Addr_A, "grp_devnull_fu_34_params_V_Addr_A");
    sc_trace(mVcdFile, grp_devnull_fu_34_params_V_EN_A, "grp_devnull_fu_34_params_V_EN_A");
    sc_trace(mVcdFile, grp_devnull_fu_34_params_V_WEN_A, "grp_devnull_fu_34_params_V_WEN_A");
    sc_trace(mVcdFile, grp_devnull_fu_34_params_V_Din_A, "grp_devnull_fu_34_params_V_Din_A");
    sc_trace(mVcdFile, ap_reg_grp_devnull_fu_34_ap_start, "ap_reg_grp_devnull_fu_34_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("datadevnull.hdltvin.dat");
    mHdltvoutHandle.open("datadevnull.hdltvout.dat");
}

datadevnull::~datadevnull() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_devnull_fu_34;
}

void datadevnull::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_devnull_fu_34_ap_start = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ap_reg_grp_devnull_fu_34_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_devnull_fu_34_ap_ready.read())) {
            ap_reg_grp_devnull_fu_34_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inv_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inv_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inv_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(inv_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inv_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(inv_V_0_state.read(), ap_const_lv2_2)))) {
            inv_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inv_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inv_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inv_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inv_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inv_V_0_state.read(), ap_const_lv2_1)))) {
            inv_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inv_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(inv_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inv_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inv_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(inv_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inv_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inv_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inv_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inv_V_0_ack_out.read()))))) {
            inv_V_0_state = ap_const_lv2_3;
        } else {
            inv_V_0_state = ap_const_lv2_2;
        }
    }
}

void datadevnull::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void datadevnull::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void datadevnull::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void datadevnull::thread_grp_devnull_fu_34_ap_start() {
    grp_devnull_fu_34_ap_start = ap_reg_grp_devnull_fu_34_ap_start.read();
}

void datadevnull::thread_inv_V_0_ack_out() {
    inv_V_0_ack_out = ap_const_logic_0;
}

void datadevnull::thread_inv_V_0_vld_in() {
    inv_V_0_vld_in = inv_V_TVALID.read();
}

void datadevnull::thread_inv_V_TREADY() {
    inv_V_TREADY = inv_V_0_state.read()[1];
}

void datadevnull::thread_params_V_Addr_A() {
    params_V_Addr_A = grp_devnull_fu_34_params_V_Addr_A.read();
}

void datadevnull::thread_params_V_Clk_A() {
    params_V_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void datadevnull::thread_params_V_Din_A() {
    params_V_Din_A = grp_devnull_fu_34_params_V_Din_A.read();
}

void datadevnull::thread_params_V_EN_A() {
    params_V_EN_A = grp_devnull_fu_34_params_V_EN_A.read();
}

void datadevnull::thread_params_V_Rst_A() {
    params_V_Rst_A =  (sc_logic) (~ap_rst_n.read());
}

void datadevnull::thread_params_V_WEN_A() {
    params_V_WEN_A = grp_devnull_fu_34_params_V_WEN_A.read();
}

void datadevnull::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_devnull_fu_34_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void datadevnull::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inv_V_TDATA\" :  \"" << inv_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inv_V_TVALID\" :  \"" << inv_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"inv_V_TREADY\" :  \"" << inv_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_Addr_A\" :  \"" << params_V_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_EN_A\" :  \"" << params_V_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_WEN_A\" :  \"" << params_V_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_Din_A\" :  \"" << params_V_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"params_V_Dout_A\" :  \"" << params_V_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_Clk_A\" :  \"" << params_V_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"params_V_Rst_A\" :  \"" << params_V_Rst_A.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

