// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="datadevnull,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg225-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.264000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=206,HLS_SYN_LUT=143}" *)

module datadevnull (
        ap_clk,
        ap_rst_n,
        inv_V_TDATA,
        inv_V_TVALID,
        inv_V_TREADY,
        params_V_Addr_A,
        params_V_EN_A,
        params_V_WEN_A,
        params_V_Din_A,
        params_V_Dout_A,
        params_V_Clk_A,
        params_V_Rst_A
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input  [31:0] inv_V_TDATA;
input   inv_V_TVALID;
output   inv_V_TREADY;
output  [31:0] params_V_Addr_A;
output   params_V_EN_A;
output  [3:0] params_V_WEN_A;
output  [31:0] params_V_Din_A;
input  [31:0] params_V_Dout_A;
output   params_V_Clk_A;
output   params_V_Rst_A;

reg params_V_Rst_A;

reg    ap_rst_n_inv;
wire    inv_V_0_vld_in;
wire    inv_V_0_ack_out;
reg   [1:0] inv_V_0_state;
wire    grp_devnull_fu_34_ap_start;
wire    grp_devnull_fu_34_ap_done;
wire    grp_devnull_fu_34_ap_idle;
wire    grp_devnull_fu_34_ap_ready;
wire   [31:0] grp_devnull_fu_34_params_V_Addr_A;
wire    grp_devnull_fu_34_params_V_EN_A;
wire   [3:0] grp_devnull_fu_34_params_V_WEN_A;
wire   [31:0] grp_devnull_fu_34_params_V_Din_A;
reg    ap_reg_grp_devnull_fu_34_ap_start;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 inv_V_0_state = 2'd0;
#0 ap_reg_grp_devnull_fu_34_ap_start = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

devnull grp_devnull_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_devnull_fu_34_ap_start),
    .ap_done(grp_devnull_fu_34_ap_done),
    .ap_idle(grp_devnull_fu_34_ap_idle),
    .ap_ready(grp_devnull_fu_34_ap_ready),
    .params_V_Addr_A(grp_devnull_fu_34_params_V_Addr_A),
    .params_V_EN_A(grp_devnull_fu_34_params_V_EN_A),
    .params_V_WEN_A(grp_devnull_fu_34_params_V_WEN_A),
    .params_V_Din_A(grp_devnull_fu_34_params_V_Din_A),
    .params_V_Dout_A(params_V_Dout_A)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_devnull_fu_34_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_reg_grp_devnull_fu_34_ap_start <= 1'b1;
        end else if ((1'b1 == grp_devnull_fu_34_ap_ready)) begin
            ap_reg_grp_devnull_fu_34_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inv_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == inv_V_0_vld_in) & (1'b1 == inv_V_0_ack_out) & (inv_V_0_state == 2'd3)) | ((1'b0 == inv_V_0_vld_in) & (inv_V_0_state == 2'd2)))) begin
            inv_V_0_state <= 2'd2;
        end else if ((((1'b1 == inv_V_0_vld_in) & (1'b0 == inv_V_0_ack_out) & (inv_V_0_state == 2'd3)) | ((1'b0 == inv_V_0_ack_out) & (inv_V_0_state == 2'd1)))) begin
            inv_V_0_state <= 2'd1;
        end else if ((((1'b1 == inv_V_0_vld_in) & (inv_V_0_state == 2'd2)) | ((1'b1 == inv_V_0_ack_out) & (inv_V_0_state == 2'd1)) | ((inv_V_0_state == 2'd3) & ~((1'b1 == inv_V_0_vld_in) & (1'b0 == inv_V_0_ack_out)) & ~((1'b0 == inv_V_0_vld_in) & (1'b1 == inv_V_0_ack_out))))) begin
            inv_V_0_state <= 2'd3;
        end else begin
            inv_V_0_state <= 2'd2;
        end
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_devnull_fu_34_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_devnull_fu_34_ap_start = ap_reg_grp_devnull_fu_34_ap_start;

assign inv_V_0_ack_out = 1'b0;

assign inv_V_0_vld_in = inv_V_TVALID;

assign inv_V_TREADY = inv_V_0_state[1'd1];

assign params_V_Addr_A = grp_devnull_fu_34_params_V_Addr_A;

assign params_V_Clk_A = ap_clk;

assign params_V_Din_A = grp_devnull_fu_34_params_V_Din_A;

assign params_V_EN_A = grp_devnull_fu_34_params_V_EN_A;

always @ (*) begin
    params_V_Rst_A = ~ap_rst_n;
end

assign params_V_WEN_A = grp_devnull_fu_34_params_V_WEN_A;

endmodule //datadevnull
