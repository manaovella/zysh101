-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vca is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inv_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inv_V_TVALID : IN STD_LOGIC;
    inv_V_TREADY : OUT STD_LOGIC;
    outv_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outv_V_TVALID : OUT STD_LOGIC;
    outv_V_TREADY : IN STD_LOGIC;
    params_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_V_EN_A : OUT STD_LOGIC;
    params_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    params_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    params_V_Clk_A : OUT STD_LOGIC;
    params_V_Rst_A : OUT STD_LOGIC );
end;


architecture behav of vca is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "vca,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg225-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.254000,HLS_SYN_LAT=866,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=928,HLS_SYN_LUT=344}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_48 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal inv_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal inv_V_0_vld_in : STD_LOGIC;
    signal inv_V_0_vld_out : STD_LOGIC;
    signal inv_V_0_ack_in : STD_LOGIC;
    signal inv_V_0_ack_out : STD_LOGIC;
    signal inv_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal inv_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal inv_V_0_sel_rd : STD_LOGIC := '0';
    signal inv_V_0_sel_wr : STD_LOGIC := '0';
    signal inv_V_0_sel : STD_LOGIC;
    signal inv_V_0_load_A : STD_LOGIC;
    signal inv_V_0_load_B : STD_LOGIC;
    signal inv_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inv_V_0_state_cmp_full : STD_LOGIC;
    signal outv_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal outv_V_1_vld_in : STD_LOGIC;
    signal outv_V_1_vld_out : STD_LOGIC;
    signal outv_V_1_ack_in : STD_LOGIC;
    signal outv_V_1_ack_out : STD_LOGIC;
    signal outv_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal outv_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal outv_V_1_sel_rd : STD_LOGIC := '0';
    signal outv_V_1_sel_wr : STD_LOGIC := '0';
    signal outv_V_1_sel : STD_LOGIC;
    signal outv_V_1_load_A : STD_LOGIC;
    signal outv_V_1_load_B : STD_LOGIC;
    signal outv_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outv_V_1_state_cmp_full : STD_LOGIC;
    signal inv_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal outv_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal reg_161 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_1_fu_171_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_322 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal dt_V_fu_177_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal dt_V_reg_333 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer_V_fu_191_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer_V_reg_338 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal params_V_addr_1_reg_358 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Val2_1_reg_363 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_6_reg_373 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal j_1_fu_272_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_381 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal sum4_fu_278_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum4_reg_386 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_121_2_fu_301_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_139 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal j_reg_150 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum4_cast_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_121_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal voice_V_fu_181_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_201_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_221_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_227_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_247_p0 : STD_LOGIC_VECTOR (53 downto 0);
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal j_cast1_fu_262_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_data_V_fu_291_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_221_p00 : STD_LOGIC_VECTOR (53 downto 0);

    component vca_mul_32ns_24s_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (53 downto 0) );
    end component;


    component vca_add_54ns_54nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (53 downto 0);
        din1 : IN STD_LOGIC_VECTOR (53 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (53 downto 0) );
    end component;



begin
    vca_mul_32ns_24s_bkb_U0 : component vca_mul_32ns_24s_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 54)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_221_p0,
        din1 => dt_V_reg_333,
        ce => ap_const_logic_1,
        dout => grp_fu_221_p2);

    vca_add_54ns_54nscud_U1 : component vca_add_54ns_54nscud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 54,
        din1_WIDTH => 54,
        dout_WIDTH => 54)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_247_p0,
        din1 => p_Val2_1_reg_363,
        ce => ap_const_logic_1,
        dout => grp_fu_247_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    inv_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inv_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = inv_V_0_ack_out) and (ap_const_logic_1 = inv_V_0_vld_out))) then 
                                        inv_V_0_sel_rd <= not(inv_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inv_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inv_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = inv_V_0_vld_in) and (ap_const_logic_1 = inv_V_0_ack_in))) then 
                                        inv_V_0_sel_wr <= not(inv_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inv_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inv_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = inv_V_0_vld_in) and (ap_const_logic_1 = inv_V_0_ack_out) and (inv_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = inv_V_0_vld_in) and (inv_V_0_state = ap_const_lv2_2)))) then 
                    inv_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = inv_V_0_vld_in) and (ap_const_logic_0 = inv_V_0_ack_out) and (inv_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = inv_V_0_ack_out) and (inv_V_0_state = ap_const_lv2_1)))) then 
                    inv_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = inv_V_0_vld_in) and (inv_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = inv_V_0_ack_out) and (inv_V_0_state = ap_const_lv2_1)) or ((inv_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = inv_V_0_vld_in) and (ap_const_logic_0 = inv_V_0_ack_out))) and not(((ap_const_logic_0 = inv_V_0_vld_in) and (ap_const_logic_1 = inv_V_0_ack_out)))))) then 
                    inv_V_0_state <= ap_const_lv2_3;
                else 
                    inv_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outv_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outv_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outv_V_1_ack_out) and (ap_const_logic_1 = outv_V_1_vld_out))) then 
                                        outv_V_1_sel_rd <= not(outv_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outv_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outv_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outv_V_1_vld_in) and (ap_const_logic_1 = outv_V_1_ack_in))) then 
                                        outv_V_1_sel_wr <= not(outv_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outv_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outv_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outv_V_1_vld_in) and (ap_const_logic_1 = outv_V_1_ack_out) and (ap_const_lv2_3 = outv_V_1_state)) or ((ap_const_logic_0 = outv_V_1_vld_in) and (ap_const_lv2_2 = outv_V_1_state)))) then 
                    outv_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outv_V_1_vld_in) and (ap_const_logic_0 = outv_V_1_ack_out) and (ap_const_lv2_3 = outv_V_1_state)) or ((ap_const_logic_0 = outv_V_1_ack_out) and (ap_const_lv2_1 = outv_V_1_state)))) then 
                    outv_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outv_V_1_vld_in) and (ap_const_lv2_2 = outv_V_1_state)) or ((ap_const_logic_1 = outv_V_1_ack_out) and (ap_const_lv2_1 = outv_V_1_state)) or ((ap_const_lv2_3 = outv_V_1_state) and not(((ap_const_logic_1 = outv_V_1_vld_in) and (ap_const_logic_0 = outv_V_1_ack_out))) and not(((ap_const_logic_0 = outv_V_1_vld_in) and (ap_const_logic_1 = outv_V_1_ack_out)))))) then 
                    outv_V_1_state <= ap_const_lv2_3;
                else 
                    outv_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_reg_139 <= i_1_reg_322;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_139 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_fu_165_p2))) then 
                j_reg_150 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (outv_V_1_ack_in = ap_const_logic_1))) then 
                j_reg_150 <= j_1_reg_381;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (inv_V_0_vld_out = ap_const_logic_1))) then
                dt_V_reg_333 <= dt_V_fu_177_p1;
                layer_V_reg_338 <= inv_V_0_data_out(30 downto 28);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_322 <= i_1_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = inv_V_0_load_A)) then
                inv_V_0_payload_A <= inv_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = inv_V_0_load_B)) then
                inv_V_0_payload_B <= inv_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (outv_V_1_ack_in = ap_const_logic_1))) then
                j_1_reg_381 <= j_1_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outv_V_1_load_A)) then
                outv_V_1_payload_A <= tmp_121_2_fu_301_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outv_V_1_load_B)) then
                outv_V_1_payload_B <= tmp_121_2_fu_301_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                p_Val2_1_reg_363 <= grp_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    params_V_addr_1_reg_358(2 downto 0) <= tmp_1_cast_fu_234_p1(10 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_161 <= params_V_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (outv_V_1_ack_in = ap_const_logic_1) and (ap_const_lv1_0 = exitcond_fu_266_p2))) then
                sum4_reg_386 <= sum4_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (outv_V_1_ack_in = ap_const_logic_1))) then
                tmp_121_fu_94 <= tmp_121_2_fu_301_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_6_reg_373 <= grp_fu_247_p2(53 downto 22);
            end if;
        end if;
    end process;
    params_V_addr_1_reg_358(9 downto 3) <= "0001001";

    ap_NS_fsm_assign_proc : process (inv_V_0_vld_out, outv_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state3, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state15, exitcond_fu_266_p2, exitcond1_fu_165_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_fu_165_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (inv_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (outv_V_1_ack_in = ap_const_logic_1) and (ap_const_lv1_1 = exitcond_fu_266_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (outv_V_1_ack_in = ap_const_logic_1) and (ap_const_lv1_0 = exitcond_fu_266_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (outv_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (outv_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    dt_V_fu_177_p1 <= inv_V_0_data_out(24 - 1 downto 0);
    exitcond1_fu_165_p2 <= "1" when (i_reg_139 = ap_const_lv7_40) else "0";
    exitcond_fu_266_p2 <= "1" when (j_reg_150 = ap_const_lv4_8) else "0";
    grp_fu_221_p0 <= grp_fu_221_p00(32 - 1 downto 0);
    grp_fu_221_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_161),54));
    grp_fu_247_p0 <= (reg_161 & ap_const_lv22_0);
    i_1_fu_171_p2 <= std_logic_vector(unsigned(i_reg_139) + unsigned(ap_const_lv7_1));
    inv_V_0_ack_in <= inv_V_0_state(1);

    inv_V_0_ack_out_assign_proc : process(inv_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (inv_V_0_vld_out = ap_const_logic_1))) then 
            inv_V_0_ack_out <= ap_const_logic_1;
        else 
            inv_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inv_V_0_data_out_assign_proc : process(inv_V_0_payload_A, inv_V_0_payload_B, inv_V_0_sel)
    begin
        if ((ap_const_logic_1 = inv_V_0_sel)) then 
            inv_V_0_data_out <= inv_V_0_payload_B;
        else 
            inv_V_0_data_out <= inv_V_0_payload_A;
        end if; 
    end process;

    inv_V_0_load_A <= (inv_V_0_state_cmp_full and not(inv_V_0_sel_wr));
    inv_V_0_load_B <= (inv_V_0_sel_wr and inv_V_0_state_cmp_full);
    inv_V_0_sel <= inv_V_0_sel_rd;
    inv_V_0_state_cmp_full <= '0' when (inv_V_0_state = ap_const_lv2_1) else '1';
    inv_V_0_vld_in <= inv_V_TVALID;
    inv_V_0_vld_out <= inv_V_0_state(0);

    inv_V_TDATA_blk_n_assign_proc : process(inv_V_0_state, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inv_V_TDATA_blk_n <= inv_V_0_state(0);
        else 
            inv_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inv_V_TREADY <= inv_V_0_state(1);
    j_1_fu_272_p2 <= std_logic_vector(unsigned(j_reg_150) + unsigned(ap_const_lv4_1));
    j_cast1_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_150),7));
    layer_V_fu_191_p4 <= inv_V_0_data_out(30 downto 28);
    outv_V_1_ack_in <= outv_V_1_state(1);
    outv_V_1_ack_out <= outv_V_TREADY;

    outv_V_1_data_out_assign_proc : process(outv_V_1_payload_A, outv_V_1_payload_B, outv_V_1_sel)
    begin
        if ((ap_const_logic_1 = outv_V_1_sel)) then 
            outv_V_1_data_out <= outv_V_1_payload_B;
        else 
            outv_V_1_data_out <= outv_V_1_payload_A;
        end if; 
    end process;

    outv_V_1_load_A <= (outv_V_1_state_cmp_full and not(outv_V_1_sel_wr));
    outv_V_1_load_B <= (outv_V_1_sel_wr and outv_V_1_state_cmp_full);
    outv_V_1_sel <= outv_V_1_sel_rd;
    outv_V_1_state_cmp_full <= '0' when (outv_V_1_state = ap_const_lv2_1) else '1';

    outv_V_1_vld_in_assign_proc : process(outv_V_1_ack_in, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (outv_V_1_ack_in = ap_const_logic_1))) then 
            outv_V_1_vld_in <= ap_const_logic_1;
        else 
            outv_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outv_V_1_vld_out <= outv_V_1_state(0);
    outv_V_TDATA <= outv_V_1_data_out;

    outv_V_TDATA_blk_n_assign_proc : process(outv_V_1_state, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            outv_V_TDATA_blk_n <= outv_V_1_state(1);
        else 
            outv_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outv_V_TVALID <= outv_V_1_state(0);
    params_V_Addr_A <= std_logic_vector(shift_left(unsigned(params_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    params_V_Addr_A_orig_assign_proc : process(ap_CS_fsm_state3, params_V_addr_1_reg_358, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state14, tmp_4_fu_209_p1, tmp_1_cast_fu_234_p1, sum4_cast_fu_284_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            params_V_Addr_A_orig <= sum4_cast_fu_284_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            params_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(params_V_addr_1_reg_358),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            params_V_Addr_A_orig <= tmp_1_cast_fu_234_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            params_V_Addr_A_orig <= tmp_4_fu_209_p1;
        else 
            params_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    params_V_Clk_A <= ap_clk;
    params_V_Din_A <= tmp_6_reg_373;

    params_V_EN_A_assign_proc : process(inv_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (inv_V_0_vld_out = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            params_V_EN_A <= ap_const_logic_1;
        else 
            params_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    params_V_Rst_A_assign_proc : process(ap_rst_n)
    begin
                params_V_Rst_A <= not(ap_rst_n);
    end process;


    params_V_WEN_A_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            params_V_WEN_A <= ap_const_lv4_F;
        else 
            params_V_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    ret_data_V_fu_291_p4 <= params_V_Dout_A(25 downto 2);
    sum4_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_reg_386),32));
    sum4_fu_278_p2 <= std_logic_vector(unsigned(j_cast1_fu_262_p1) + unsigned(ap_const_lv7_48));
    tmp_121_2_fu_301_p5 <= (tmp_121_fu_94(31 downto 24) & ret_data_V_fu_291_p4);
    tmp_1_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_227_p3),32));
    tmp_1_fu_227_p3 <= (ap_const_lv4_9 & layer_V_reg_338);
    tmp_2_fu_201_p3 <= (layer_V_fu_191_p4 & voice_V_fu_181_p4);
    tmp_4_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_201_p3),32));
    voice_V_fu_181_p4 <= inv_V_0_data_out(26 downto 24);
end behav;
