-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity masterdevnull is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inv_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inv_TVALID : IN STD_LOGIC;
    inv_TREADY : OUT STD_LOGIC;
    params_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_V_EN_A : OUT STD_LOGIC;
    params_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    params_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    params_V_Clk_A : OUT STD_LOGIC;
    params_V_Rst_A : OUT STD_LOGIC );
end;


architecture behav of masterdevnull is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "masterdevnull,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg225-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.264000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=206,HLS_SYN_LUT=143}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal inv_0_vld_in : STD_LOGIC;
    signal inv_0_ack_out : STD_LOGIC;
    signal inv_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal grp_devnull_fu_34_ap_start : STD_LOGIC;
    signal grp_devnull_fu_34_ap_done : STD_LOGIC;
    signal grp_devnull_fu_34_ap_idle : STD_LOGIC;
    signal grp_devnull_fu_34_ap_ready : STD_LOGIC;
    signal grp_devnull_fu_34_params_V_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_devnull_fu_34_params_V_EN_A : STD_LOGIC;
    signal grp_devnull_fu_34_params_V_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_devnull_fu_34_params_V_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_grp_devnull_fu_34_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component devnull IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        params_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_V_EN_A : OUT STD_LOGIC;
        params_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        params_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_devnull_fu_34 : component devnull
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_devnull_fu_34_ap_start,
        ap_done => grp_devnull_fu_34_ap_done,
        ap_idle => grp_devnull_fu_34_ap_idle,
        ap_ready => grp_devnull_fu_34_ap_ready,
        params_V_Addr_A => grp_devnull_fu_34_params_V_Addr_A,
        params_V_EN_A => grp_devnull_fu_34_params_V_EN_A,
        params_V_WEN_A => grp_devnull_fu_34_params_V_WEN_A,
        params_V_Din_A => grp_devnull_fu_34_params_V_Din_A,
        params_V_Dout_A => params_V_Dout_A);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_devnull_fu_34_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_devnull_fu_34_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_reg_grp_devnull_fu_34_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_devnull_fu_34_ap_ready)) then 
                    ap_reg_grp_devnull_fu_34_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    inv_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inv_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = inv_0_vld_in) and (ap_const_logic_1 = inv_0_ack_out) and (inv_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = inv_0_vld_in) and (inv_0_state = ap_const_lv2_2)))) then 
                    inv_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = inv_0_vld_in) and (ap_const_logic_0 = inv_0_ack_out) and (inv_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = inv_0_ack_out) and (inv_0_state = ap_const_lv2_1)))) then 
                    inv_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = inv_0_vld_in) and (inv_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = inv_0_ack_out) and (inv_0_state = ap_const_lv2_1)) or ((inv_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = inv_0_vld_in) and (ap_const_logic_0 = inv_0_ack_out))) and not(((ap_const_logic_0 = inv_0_vld_in) and (ap_const_logic_1 = inv_0_ack_out)))))) then 
                    inv_0_state <= ap_const_lv2_3;
                else 
                    inv_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (grp_devnull_fu_34_ap_done, ap_CS_fsm, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_devnull_fu_34_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_devnull_fu_34_ap_start <= ap_reg_grp_devnull_fu_34_ap_start;
    inv_0_ack_out <= ap_const_logic_0;
    inv_0_vld_in <= inv_TVALID;
    inv_TREADY <= inv_0_state(1);
    params_V_Addr_A <= grp_devnull_fu_34_params_V_Addr_A;
    params_V_Clk_A <= ap_clk;
    params_V_Din_A <= grp_devnull_fu_34_params_V_Din_A;
    params_V_EN_A <= grp_devnull_fu_34_params_V_EN_A;

    params_V_Rst_A_assign_proc : process(ap_rst_n)
    begin
                params_V_Rst_A <= not(ap_rst_n);
    end process;

    params_V_WEN_A <= grp_devnull_fu_34_params_V_WEN_A;
end behav;
