-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (23 downto 0);
    params_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_V_EN_A : OUT STD_LOGIC;
    params_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    params_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of lut is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ret_V_fu_56_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ret_V_reg_120 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_70_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_126 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_76_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ret_V_1_reg_131 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_1_fu_94_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_1_reg_136 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_fu_101_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_66_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_fu_82_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_89_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_return_preg : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv24_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_return_preg <= params_V_Dout_A(31 downto 8);
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_1_reg_136 <= p_1_fu_94_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ret_V_1_reg_131 <= ret_V_1_fu_76_p2;
                ret_V_reg_120 <= in_V(23 downto 22);
                tmp_2_reg_126 <= tmp_2_fu_70_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(params_V_Dout_A, ap_CS_fsm_state4, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_return <= params_V_Dout_A(31 downto 8);
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    p_1_fu_94_p3 <= 
        p_s_fu_89_p3 when (tmp_fu_82_p3(0) = '1') else 
        ret_V_reg_120;
    p_s_fu_89_p3 <= 
        ret_V_reg_120 when (tmp_2_reg_126(0) = '1') else 
        ret_V_1_reg_131;
    params_V_Addr_A <= std_logic_vector(shift_left(unsigned(params_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    params_V_Addr_A_orig <= tmp_4_fu_101_p1;
    params_V_Din_A <= ap_const_lv32_0;

    params_V_EN_A_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            params_V_EN_A <= ap_const_logic_1;
        else 
            params_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    params_V_WEN_A <= ap_const_lv4_0;
    ret_V_1_fu_76_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ret_V_fu_56_p4));
    ret_V_fu_56_p4 <= in_V(23 downto 22);
    tmp_1_fu_66_p1 <= in_V(22 - 1 downto 0);
    tmp_2_fu_70_p2 <= "1" when (tmp_1_fu_66_p1 = ap_const_lv22_0) else "0";
        tmp_4_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_1_reg_136),32));

    tmp_fu_82_p3 <= in_V(23 downto 23);
end behav;
