-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vcamaster is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inv_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inv_V_TVALID : IN STD_LOGIC;
    inv_V_TREADY : OUT STD_LOGIC;
    outv_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    outv_V_V_TVALID : OUT STD_LOGIC;
    outv_V_V_TREADY : IN STD_LOGIC;
    params_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_V_EN_A : OUT STD_LOGIC;
    params_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    params_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    params_V_Clk_A : OUT STD_LOGIC;
    params_V_Rst_A : OUT STD_LOGIC );
end;


architecture behav of vcamaster is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "vcamaster,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg225-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.300000,HLS_SYN_LAT=84,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=1032,HLS_SYN_LUT=386}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal inv_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal inv_V_0_vld_in : STD_LOGIC;
    signal inv_V_0_vld_out : STD_LOGIC;
    signal inv_V_0_ack_in : STD_LOGIC;
    signal inv_V_0_ack_out : STD_LOGIC;
    signal inv_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal inv_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal inv_V_0_sel_rd : STD_LOGIC := '0';
    signal inv_V_0_sel_wr : STD_LOGIC := '0';
    signal inv_V_0_sel : STD_LOGIC;
    signal inv_V_0_load_A : STD_LOGIC;
    signal inv_V_0_load_B : STD_LOGIC;
    signal inv_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inv_V_0_state_cmp_full : STD_LOGIC;
    signal outv_V_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal outv_V_V_1_vld_in : STD_LOGIC;
    signal outv_V_V_1_vld_out : STD_LOGIC;
    signal outv_V_V_1_ack_in : STD_LOGIC;
    signal outv_V_V_1_ack_out : STD_LOGIC;
    signal outv_V_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal outv_V_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal outv_V_V_1_sel_rd : STD_LOGIC := '0';
    signal outv_V_V_1_sel_wr : STD_LOGIC := '0';
    signal outv_V_V_1_sel : STD_LOGIC;
    signal outv_V_V_1_load_A : STD_LOGIC;
    signal outv_V_V_1_load_B : STD_LOGIC;
    signal outv_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outv_V_V_1_state_cmp_full : STD_LOGIC;
    signal inv_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal outv_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_1_fu_131_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_256 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_153_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_reg_266 : STD_LOGIC_VECTOR (48 downto 0);
    signal ret_V_cast1_reg_271 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_169_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_reg_276 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_2_reg_281 : STD_LOGIC_VECTOR (23 downto 0);
    signal params_V_load_reg_287 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_1_reg_302 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_1_i_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ret_V_1_fu_228_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_1_reg_317 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_fu_245_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_s_reg_97 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_109 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast2_fu_120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_i_fu_141_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_shl_i_cast_fu_149_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal OP1_V_1_cast1_fu_137_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_5_fu_183_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_194_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_200_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_2_fu_208_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_fu_233_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_240_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_194_ce : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_194_p00 : STD_LOGIC_VECTOR (47 downto 0);

    component vcamaster_mul_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;



begin
    vcamaster_mul_32nbkb_U0 : component vcamaster_mul_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_194_p0,
        din1 => tmp_5_fu_183_p1,
        ce => grp_fu_194_ce,
        dout => grp_fu_194_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    inv_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inv_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = inv_V_0_ack_out) and (ap_const_logic_1 = inv_V_0_vld_out))) then 
                                        inv_V_0_sel_rd <= not(inv_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inv_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inv_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = inv_V_0_vld_in) and (ap_const_logic_1 = inv_V_0_ack_in))) then 
                                        inv_V_0_sel_wr <= not(inv_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inv_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inv_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = inv_V_0_vld_in) and (ap_const_logic_1 = inv_V_0_ack_out) and (inv_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = inv_V_0_vld_in) and (inv_V_0_state = ap_const_lv2_2)))) then 
                    inv_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = inv_V_0_vld_in) and (ap_const_logic_0 = inv_V_0_ack_out) and (inv_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = inv_V_0_ack_out) and (inv_V_0_state = ap_const_lv2_1)))) then 
                    inv_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = inv_V_0_vld_in) and (inv_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = inv_V_0_ack_out) and (inv_V_0_state = ap_const_lv2_1)) or ((inv_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = inv_V_0_vld_in) and (ap_const_logic_0 = inv_V_0_ack_out))) and not(((ap_const_logic_0 = inv_V_0_vld_in) and (ap_const_logic_1 = inv_V_0_ack_out)))))) then 
                    inv_V_0_state <= ap_const_lv2_3;
                else 
                    inv_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outv_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outv_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outv_V_V_1_ack_out) and (ap_const_logic_1 = outv_V_V_1_vld_out))) then 
                                        outv_V_V_1_sel_rd <= not(outv_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outv_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outv_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outv_V_V_1_vld_in) and (ap_const_logic_1 = outv_V_V_1_ack_in))) then 
                                        outv_V_V_1_sel_wr <= not(outv_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outv_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outv_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outv_V_V_1_vld_in) and (ap_const_logic_1 = outv_V_V_1_ack_out) and (ap_const_lv2_3 = outv_V_V_1_state)) or ((ap_const_logic_0 = outv_V_V_1_vld_in) and (ap_const_lv2_2 = outv_V_V_1_state)))) then 
                    outv_V_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outv_V_V_1_vld_in) and (ap_const_logic_0 = outv_V_V_1_ack_out) and (ap_const_lv2_3 = outv_V_V_1_state)) or ((ap_const_logic_0 = outv_V_V_1_ack_out) and (ap_const_lv2_1 = outv_V_V_1_state)))) then 
                    outv_V_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outv_V_V_1_vld_in) and (ap_const_lv2_2 = outv_V_V_1_state)) or ((ap_const_logic_1 = outv_V_V_1_ack_out) and (ap_const_lv2_1 = outv_V_V_1_state)) or ((ap_const_lv2_3 = outv_V_V_1_state) and not(((ap_const_logic_1 = outv_V_V_1_vld_in) and (ap_const_logic_0 = outv_V_V_1_ack_out))) and not(((ap_const_logic_0 = outv_V_V_1_vld_in) and (ap_const_logic_1 = outv_V_V_1_ack_out)))))) then 
                    outv_V_V_1_state <= ap_const_lv2_3;
                else 
                    outv_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_reg_109 <= i_1_reg_256;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_109 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_s_reg_97 <= p_Val2_2_fu_208_p2(47 downto 24);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                p_Val2_s_reg_97 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_256 <= i_1_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = inv_V_0_load_A)) then
                inv_V_0_payload_A <= inv_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = inv_V_0_load_B)) then
                inv_V_0_payload_B <= inv_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outv_V_V_1_load_A)) then
                outv_V_V_1_payload_A <= tmp_V_fu_245_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outv_V_V_1_load_B)) then
                outv_V_V_1_payload_B <= tmp_V_fu_245_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_1_reg_302 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                params_V_load_reg_287 <= params_V_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond_fu_125_p2))) then
                r_V_reg_266 <= r_V_fu_153_p2;
                ret_V_cast1_reg_271 <= r_V_fu_153_p2(45 downto 22);
                tmp_1_reg_276 <= tmp_1_fu_169_p1;
                tmp_2_reg_281 <= r_V_fu_153_p2(45 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                ret_V_1_reg_317 <= ret_V_1_fu_228_p2;
                tmp_1_i_reg_312 <= tmp_1_i_fu_223_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (inv_V_0_vld_out, outv_V_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state4, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state2, exitcond_fu_125_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond_fu_125_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (inv_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (outv_V_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (outv_V_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
        OP1_V_1_cast1_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_97),49));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond_fu_125_p2 <= "1" when (i_reg_109 = ap_const_lv4_8) else "0";

    grp_fu_194_ce_assign_proc : process(inv_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (inv_V_0_vld_out = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_194_ce <= ap_const_logic_1;
        else 
            grp_fu_194_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_194_p0 <= grp_fu_194_p00(32 - 1 downto 0);
    grp_fu_194_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(params_V_load_reg_287),48));
    i_1_fu_131_p2 <= std_logic_vector(unsigned(i_reg_109) + unsigned(ap_const_lv4_1));
    i_cast2_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_109),32));
    inv_V_0_ack_in <= inv_V_0_state(1);

    inv_V_0_ack_out_assign_proc : process(inv_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (inv_V_0_vld_out = ap_const_logic_1))) then 
            inv_V_0_ack_out <= ap_const_logic_1;
        else 
            inv_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inv_V_0_data_out_assign_proc : process(inv_V_0_payload_A, inv_V_0_payload_B, inv_V_0_sel)
    begin
        if ((ap_const_logic_1 = inv_V_0_sel)) then 
            inv_V_0_data_out <= inv_V_0_payload_B;
        else 
            inv_V_0_data_out <= inv_V_0_payload_A;
        end if; 
    end process;

    inv_V_0_load_A <= (inv_V_0_state_cmp_full and not(inv_V_0_sel_wr));
    inv_V_0_load_B <= (inv_V_0_sel_wr and inv_V_0_state_cmp_full);
    inv_V_0_sel <= inv_V_0_sel_rd;
    inv_V_0_state_cmp_full <= '0' when (inv_V_0_state = ap_const_lv2_1) else '1';
    inv_V_0_vld_in <= inv_V_TVALID;
    inv_V_0_vld_out <= inv_V_0_state(0);

    inv_V_TDATA_blk_n_assign_proc : process(inv_V_0_state, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inv_V_TDATA_blk_n <= inv_V_0_state(0);
        else 
            inv_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inv_V_TREADY <= inv_V_0_state(1);
    outv_V_V_1_ack_in <= outv_V_V_1_state(1);
    outv_V_V_1_ack_out <= outv_V_V_TREADY;

    outv_V_V_1_data_out_assign_proc : process(outv_V_V_1_payload_A, outv_V_V_1_payload_B, outv_V_V_1_sel)
    begin
        if ((ap_const_logic_1 = outv_V_V_1_sel)) then 
            outv_V_V_1_data_out <= outv_V_V_1_payload_B;
        else 
            outv_V_V_1_data_out <= outv_V_V_1_payload_A;
        end if; 
    end process;

    outv_V_V_1_load_A <= (outv_V_V_1_state_cmp_full and not(outv_V_V_1_sel_wr));
    outv_V_V_1_load_B <= (outv_V_V_1_sel_wr and outv_V_V_1_state_cmp_full);
    outv_V_V_1_sel <= outv_V_V_1_sel_rd;
    outv_V_V_1_state_cmp_full <= '0' when (outv_V_V_1_state = ap_const_lv2_1) else '1';

    outv_V_V_1_vld_in_assign_proc : process(outv_V_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (outv_V_V_1_ack_in = ap_const_logic_1))) then 
            outv_V_V_1_vld_in <= ap_const_logic_1;
        else 
            outv_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outv_V_V_1_vld_out <= outv_V_V_1_state(0);
    outv_V_V_TDATA <= outv_V_V_1_data_out;

    outv_V_V_TDATA_blk_n_assign_proc : process(outv_V_V_1_state, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            outv_V_V_TDATA_blk_n <= outv_V_V_1_state(1);
        else 
            outv_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outv_V_V_TVALID <= outv_V_V_1_state(0);
    p_Val2_2_fu_208_p2 <= std_logic_vector(unsigned(tmp_4_fu_200_p3) + unsigned(p_Val2_1_reg_302));
        p_shl_i_cast_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_i_fu_141_p3),49));

    p_shl_i_fu_141_p3 <= (p_Val2_s_reg_97 & ap_const_lv24_0);
    params_V_Addr_A <= std_logic_vector(shift_left(unsigned(i_cast2_fu_120_p1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    params_V_Clk_A <= ap_clk;
    params_V_Din_A <= ap_const_lv32_0;

    params_V_EN_A_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            params_V_EN_A <= ap_const_logic_1;
        else 
            params_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    params_V_Rst_A_assign_proc : process(ap_rst_n)
    begin
                params_V_Rst_A <= not(ap_rst_n);
    end process;

    params_V_WEN_A <= ap_const_lv4_0;
    r_V_fu_153_p2 <= std_logic_vector(signed(p_shl_i_cast_fu_149_p1) - signed(OP1_V_1_cast1_fu_137_p1));
    ret_V_1_fu_228_p2 <= std_logic_vector(unsigned(ap_const_lv24_1) + unsigned(ret_V_cast1_reg_271));
    tmp_1_fu_169_p1 <= r_V_fu_153_p2(22 - 1 downto 0);
    tmp_1_i_fu_223_p2 <= "1" when (tmp_1_reg_276 = ap_const_lv22_0) else "0";
    tmp_4_fu_200_p3 <= (p_Val2_s_reg_97 & ap_const_lv24_0);
    tmp_5_fu_183_p1 <= inv_V_0_data_out(24 - 1 downto 0);
    tmp_6_fu_240_p3 <= 
        tmp_2_reg_281 when (tmp_1_i_reg_312(0) = '1') else 
        ret_V_1_reg_317;
    tmp_V_fu_245_p3 <= 
        tmp_6_fu_240_p3 when (tmp_fu_233_p3(0) = '1') else 
        tmp_2_reg_281;
    tmp_fu_233_p3 <= r_V_reg_266(48 downto 48);
end behav;
