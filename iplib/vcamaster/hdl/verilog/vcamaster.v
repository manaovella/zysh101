// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="vcamaster,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg225-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.300000,HLS_SYN_LAT=84,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=1032,HLS_SYN_LUT=386}" *)

module vcamaster (
        ap_clk,
        ap_rst_n,
        inv_V_TDATA,
        inv_V_TVALID,
        inv_V_TREADY,
        outv_V_V_TDATA,
        outv_V_V_TVALID,
        outv_V_V_TREADY,
        params_V_Addr_A,
        params_V_EN_A,
        params_V_WEN_A,
        params_V_Din_A,
        params_V_Dout_A,
        params_V_Clk_A,
        params_V_Rst_A
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst_n;
input  [31:0] inv_V_TDATA;
input   inv_V_TVALID;
output   inv_V_TREADY;
output  [23:0] outv_V_V_TDATA;
output   outv_V_V_TVALID;
input   outv_V_V_TREADY;
output  [31:0] params_V_Addr_A;
output   params_V_EN_A;
output  [3:0] params_V_WEN_A;
output  [31:0] params_V_Din_A;
input  [31:0] params_V_Dout_A;
output   params_V_Clk_A;
output   params_V_Rst_A;

reg params_V_EN_A;
reg params_V_Rst_A;

reg    ap_rst_n_inv;
reg   [31:0] inv_V_0_data_out;
wire    inv_V_0_vld_in;
wire    inv_V_0_vld_out;
wire    inv_V_0_ack_in;
reg    inv_V_0_ack_out;
reg   [31:0] inv_V_0_payload_A;
reg   [31:0] inv_V_0_payload_B;
reg    inv_V_0_sel_rd;
reg    inv_V_0_sel_wr;
wire    inv_V_0_sel;
wire    inv_V_0_load_A;
wire    inv_V_0_load_B;
reg   [1:0] inv_V_0_state;
wire    inv_V_0_state_cmp_full;
reg   [23:0] outv_V_V_1_data_out;
reg    outv_V_V_1_vld_in;
wire    outv_V_V_1_vld_out;
wire    outv_V_V_1_ack_in;
wire    outv_V_V_1_ack_out;
reg   [23:0] outv_V_V_1_payload_A;
reg   [23:0] outv_V_V_1_payload_B;
reg    outv_V_V_1_sel_rd;
reg    outv_V_V_1_sel_wr;
wire    outv_V_V_1_sel;
wire    outv_V_V_1_load_A;
wire    outv_V_V_1_load_B;
reg   [1:0] outv_V_V_1_state;
wire    outv_V_V_1_state_cmp_full;
reg    inv_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state4;
reg    outv_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire   [3:0] i_1_fu_131_p2;
reg   [3:0] i_1_reg_256;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_125_p2;
wire   [48:0] r_V_fu_153_p2;
reg   [48:0] r_V_reg_266;
reg   [23:0] ret_V_cast1_reg_271;
wire   [21:0] tmp_1_fu_169_p1;
reg   [21:0] tmp_1_reg_276;
reg   [23:0] tmp_2_reg_281;
reg   [31:0] params_V_load_reg_287;
wire    ap_CS_fsm_state3;
wire   [47:0] grp_fu_194_p2;
reg   [47:0] p_Val2_1_reg_302;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire   [0:0] tmp_1_i_fu_223_p2;
reg   [0:0] tmp_1_i_reg_312;
wire    ap_CS_fsm_state12;
wire   [23:0] ret_V_1_fu_228_p2;
reg   [23:0] ret_V_1_reg_317;
wire   [23:0] tmp_V_fu_245_p3;
reg   [23:0] p_Val2_s_reg_97;
wire    ap_CS_fsm_state1;
reg   [3:0] i_reg_109;
wire   [31:0] i_cast2_fu_120_p1;
wire   [47:0] p_shl_i_fu_141_p3;
wire  signed [48:0] p_shl_i_cast_fu_149_p1;
wire  signed [48:0] OP1_V_1_cast1_fu_137_p1;
wire  signed [23:0] tmp_5_fu_183_p1;
wire   [31:0] grp_fu_194_p0;
wire   [47:0] tmp_4_fu_200_p3;
wire   [47:0] p_Val2_2_fu_208_p2;
wire   [0:0] tmp_fu_233_p3;
wire   [23:0] tmp_6_fu_240_p3;
reg    grp_fu_194_ce;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [13:0] ap_NS_fsm;
wire   [47:0] grp_fu_194_p00;

// power-on initialization
initial begin
#0 inv_V_0_sel_rd = 1'b0;
#0 inv_V_0_sel_wr = 1'b0;
#0 inv_V_0_state = 2'd0;
#0 outv_V_V_1_sel_rd = 1'b0;
#0 outv_V_V_1_sel_wr = 1'b0;
#0 outv_V_V_1_state = 2'd0;
#0 ap_CS_fsm = 14'd1;
end

vcamaster_mul_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 48 ))
vcamaster_mul_32nbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_194_p0),
    .din1(tmp_5_fu_183_p1),
    .ce(grp_fu_194_ce),
    .dout(grp_fu_194_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inv_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inv_V_0_ack_out) & (1'b1 == inv_V_0_vld_out))) begin
            inv_V_0_sel_rd <= ~inv_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inv_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inv_V_0_vld_in) & (1'b1 == inv_V_0_ack_in))) begin
            inv_V_0_sel_wr <= ~inv_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inv_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == inv_V_0_vld_in) & (1'b1 == inv_V_0_ack_out) & (inv_V_0_state == 2'd3)) | ((1'b0 == inv_V_0_vld_in) & (inv_V_0_state == 2'd2)))) begin
            inv_V_0_state <= 2'd2;
        end else if ((((1'b1 == inv_V_0_vld_in) & (1'b0 == inv_V_0_ack_out) & (inv_V_0_state == 2'd3)) | ((1'b0 == inv_V_0_ack_out) & (inv_V_0_state == 2'd1)))) begin
            inv_V_0_state <= 2'd1;
        end else if ((((1'b1 == inv_V_0_vld_in) & (inv_V_0_state == 2'd2)) | ((1'b1 == inv_V_0_ack_out) & (inv_V_0_state == 2'd1)) | ((inv_V_0_state == 2'd3) & ~((1'b1 == inv_V_0_vld_in) & (1'b0 == inv_V_0_ack_out)) & ~((1'b0 == inv_V_0_vld_in) & (1'b1 == inv_V_0_ack_out))))) begin
            inv_V_0_state <= 2'd3;
        end else begin
            inv_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outv_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outv_V_V_1_ack_out) & (1'b1 == outv_V_V_1_vld_out))) begin
            outv_V_V_1_sel_rd <= ~outv_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outv_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outv_V_V_1_vld_in) & (1'b1 == outv_V_V_1_ack_in))) begin
            outv_V_V_1_sel_wr <= ~outv_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outv_V_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == outv_V_V_1_vld_in) & (1'b1 == outv_V_V_1_ack_out) & (2'd3 == outv_V_V_1_state)) | ((1'b0 == outv_V_V_1_vld_in) & (2'd2 == outv_V_V_1_state)))) begin
            outv_V_V_1_state <= 2'd2;
        end else if ((((1'b1 == outv_V_V_1_vld_in) & (1'b0 == outv_V_V_1_ack_out) & (2'd3 == outv_V_V_1_state)) | ((1'b0 == outv_V_V_1_ack_out) & (2'd1 == outv_V_V_1_state)))) begin
            outv_V_V_1_state <= 2'd1;
        end else if ((((1'b1 == outv_V_V_1_vld_in) & (2'd2 == outv_V_V_1_state)) | ((1'b1 == outv_V_V_1_ack_out) & (2'd1 == outv_V_V_1_state)) | ((2'd3 == outv_V_V_1_state) & ~((1'b1 == outv_V_V_1_vld_in) & (1'b0 == outv_V_V_1_ack_out)) & ~((1'b0 == outv_V_V_1_vld_in) & (1'b1 == outv_V_V_1_ack_out))))) begin
            outv_V_V_1_state <= 2'd3;
        end else begin
            outv_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_reg_109 <= i_1_reg_256;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_109 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_s_reg_97 <= {{p_Val2_2_fu_208_p2[47:24]}};
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_Val2_s_reg_97 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_256 <= i_1_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inv_V_0_load_A)) begin
        inv_V_0_payload_A <= inv_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inv_V_0_load_B)) begin
        inv_V_0_payload_B <= inv_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outv_V_V_1_load_A)) begin
        outv_V_V_1_payload_A <= tmp_V_fu_245_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outv_V_V_1_load_B)) begin
        outv_V_V_1_payload_B <= tmp_V_fu_245_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_1_reg_302 <= grp_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        params_V_load_reg_287 <= params_V_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond_fu_125_p2))) begin
        r_V_reg_266 <= r_V_fu_153_p2;
        ret_V_cast1_reg_271 <= {{r_V_fu_153_p2[45:22]}};
        tmp_1_reg_276 <= tmp_1_fu_169_p1;
        tmp_2_reg_281 <= {{r_V_fu_153_p2[45:22]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ret_V_1_reg_317 <= ret_V_1_fu_228_p2;
        tmp_1_i_reg_312 <= tmp_1_i_fu_223_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (inv_V_0_vld_out == 1'b1)) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_194_ce = 1'b1;
    end else begin
        grp_fu_194_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (inv_V_0_vld_out == 1'b1))) begin
        inv_V_0_ack_out = 1'b1;
    end else begin
        inv_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inv_V_0_sel)) begin
        inv_V_0_data_out = inv_V_0_payload_B;
    end else begin
        inv_V_0_data_out = inv_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        inv_V_TDATA_blk_n = inv_V_0_state[1'd0];
    end else begin
        inv_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == outv_V_V_1_sel)) begin
        outv_V_V_1_data_out = outv_V_V_1_payload_B;
    end else begin
        outv_V_V_1_data_out = outv_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (outv_V_V_1_ack_in == 1'b1))) begin
        outv_V_V_1_vld_in = 1'b1;
    end else begin
        outv_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14))) begin
        outv_V_V_TDATA_blk_n = outv_V_V_1_state[1'd1];
    end else begin
        outv_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        params_V_EN_A = 1'b1;
    end else begin
        params_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond_fu_125_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (inv_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (outv_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (outv_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_1_cast1_fu_137_p1 = $signed(p_Val2_s_reg_97);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_125_p2 = ((i_reg_109 == 4'd8) ? 1'b1 : 1'b0);

assign grp_fu_194_p0 = grp_fu_194_p00;

assign grp_fu_194_p00 = params_V_load_reg_287;

assign i_1_fu_131_p2 = (i_reg_109 + 4'd1);

assign i_cast2_fu_120_p1 = i_reg_109;

assign inv_V_0_ack_in = inv_V_0_state[1'd1];

assign inv_V_0_load_A = (inv_V_0_state_cmp_full & ~inv_V_0_sel_wr);

assign inv_V_0_load_B = (inv_V_0_sel_wr & inv_V_0_state_cmp_full);

assign inv_V_0_sel = inv_V_0_sel_rd;

assign inv_V_0_state_cmp_full = ((inv_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inv_V_0_vld_in = inv_V_TVALID;

assign inv_V_0_vld_out = inv_V_0_state[1'd0];

assign inv_V_TREADY = inv_V_0_state[1'd1];

assign outv_V_V_1_ack_in = outv_V_V_1_state[1'd1];

assign outv_V_V_1_ack_out = outv_V_V_TREADY;

assign outv_V_V_1_load_A = (outv_V_V_1_state_cmp_full & ~outv_V_V_1_sel_wr);

assign outv_V_V_1_load_B = (outv_V_V_1_sel_wr & outv_V_V_1_state_cmp_full);

assign outv_V_V_1_sel = outv_V_V_1_sel_rd;

assign outv_V_V_1_state_cmp_full = ((outv_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outv_V_V_1_vld_out = outv_V_V_1_state[1'd0];

assign outv_V_V_TDATA = outv_V_V_1_data_out;

assign outv_V_V_TVALID = outv_V_V_1_state[1'd0];

assign p_Val2_2_fu_208_p2 = (tmp_4_fu_200_p3 + p_Val2_1_reg_302);

assign p_shl_i_cast_fu_149_p1 = $signed(p_shl_i_fu_141_p3);

assign p_shl_i_fu_141_p3 = {{p_Val2_s_reg_97}, {24'd0}};

assign params_V_Addr_A = i_cast2_fu_120_p1 << 32'd2;

assign params_V_Clk_A = ap_clk;

assign params_V_Din_A = 32'd0;

always @ (*) begin
    params_V_Rst_A = ~ap_rst_n;
end

assign params_V_WEN_A = 4'd0;

assign r_V_fu_153_p2 = ($signed(p_shl_i_cast_fu_149_p1) - $signed(OP1_V_1_cast1_fu_137_p1));

assign ret_V_1_fu_228_p2 = (24'd1 + ret_V_cast1_reg_271);

assign tmp_1_fu_169_p1 = r_V_fu_153_p2[21:0];

assign tmp_1_i_fu_223_p2 = ((tmp_1_reg_276 == 22'd0) ? 1'b1 : 1'b0);

assign tmp_4_fu_200_p3 = {{p_Val2_s_reg_97}, {24'd0}};

assign tmp_5_fu_183_p1 = inv_V_0_data_out[23:0];

assign tmp_6_fu_240_p3 = ((tmp_1_i_reg_312[0:0] === 1'b1) ? tmp_2_reg_281 : ret_V_1_reg_317);

assign tmp_V_fu_245_p3 = ((tmp_fu_233_p3[0:0] === 1'b1) ? tmp_6_fu_240_p3 : tmp_2_reg_281);

assign tmp_fu_233_p3 = r_V_reg_266[32'd48];

endmodule //vcamaster
